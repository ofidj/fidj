{"version":3,"file":"angular.service.d.ts","sources":["angular.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { EndpointInterface, ErrorInterface, ModuleServiceInitOptionsInterface, ModuleServiceInterface, ModuleServiceLoginOptionsInterface } from './interfaces';\n/**\n * Angular FidjService\n * @see ModuleServiceInterface\n *\n */\nexport declare class FidjService implements ModuleServiceInterface {\n    private logger;\n    private fidjService;\n    private promise;\n    constructor();\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n    isLoggedIn(): boolean;\n    getRoles(): Promise<Array<string>>;\n    getEndpoints(): Promise<Array<EndpointInterface>>;\n    sendOnEndpoint(key: string, verb: string, relativePath?: string, data?: any): Promise<any | ErrorInterface>;\n    getIdToken(): Promise<string>;\n    getMessage(): Promise<string>;\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    sync(fnInitFirstData?: any): Promise<void | ErrorInterface>;\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    put(data: any): Promise<string | ErrorInterface>;\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    remove(id: string): Promise<void | ErrorInterface>;\n    /**\n     * Find\n     */\n    find(id: string): Promise<any | ErrorInterface>;\n    findAll(): Promise<any[] | ErrorInterface>;\n}\n"]}