{"version":3,"sources":["ng://fidj/tools/base64.ts","ng://fidj/tools/storage.ts","ng://fidj/tools/xor.ts","ng://fidj/connection/xhrpromise.ts","ng://fidj/connection/ajax.ts","ng://fidj/connection/client.ts","ng://fidj/sdk/error.ts","ng://fidj/connection/connection.ts","ng://fidj/session/session.ts","ng://fidj/sdk/internal.service.ts","ng://fidj/version/index.ts","ng://fidj/sdk/angular.service.ts","ng://fidj/sdk/fidj.module.ts"],"names":["Base64","encode","input","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","this","storage","window","localStorage","Error","prototype","set","key","value","checkKey","t","JSON","stringify","string","number","bool","TypeError","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","length","size","foreach","f","context","n","i","call","Xor","encrypt","result","header","keyCharAt","decrypt","oldStyle","substring","Math","floor","XHRPromise","send","options","defaults","_this","method","data","headers","async","username","password","withCredentials","Object","assign","Promise","resolve","reject","e","ref","xhr","XMLHttpRequest","url","_xhr","onload","responseText","_detachWindowUnload","_getResponseText","_error","_handleError","_getResponseUrl","status","statusText","_getHeaders","onerror","ontimeout","onabort","_attachWindowUnload","open","DEFAULT_CONTENT_TYPE","hasOwnProperty","setRequestHeader","getXHR","_unloadHandler","_handleWindowUnload","bind","attachEvent","detachEvent","_parseHeaders","getAllResponseHeaders","getResponseHeader","responseURL","test","reason","code","abort","trim","str","isArray","arg","forEach","list","iterator","forEachArray","forEachString","forEachObject","array","len","charAt","object","k","row","index","indexOf","_this_1","toLowerCase","push","Ajax","post","args","opt","then","res","catch","err","put","delete","Client","appId","URI","sdk","uuid","_clientUuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","clientId","_clientId","refreshCount","_refreshCount","setClientId","clientUuid","clientInfo","login","updateProperties","console","error","urlLogin","dataLogin","name","email","Content-Type","Accept","createdUser","_id","urlToken","dataToken","grant_type","client_id","client_secret","client_udid","client_info","audience","scope","reAuthenticate","refreshToken","refresh_token","refresh_extra","obj","logout","token","isReady","equals","msg","Connection","_sdk","_storage","client","user","cryptoSalt","_cryptoSalt","cryptoSaltNext","_cryptoSaltNext","accessToken","_accessToken","accessTokenPrevious","idToken","_idToken","_refreshToken","states","_states","apis","destroy","force","_accessTokenPrevious","setClient","_name","getIdPayload","setUser","getUser","getClient","setCryptoSalt","setCryptoSaltAsVerified","dataAsObj","fidjCrypto","decrypted","isLogin","exp","payload","decoded","Date","getTime","getClientId","getIdToken","getAccessPayload","getPreviousAccessPayload","refreshConnection","setConnection","clientUser","access_token","salt","id_token","roles","message","setConnectionOffline","getApiEndpoints","ea","blocked","filteredEa","prod","apiEndpoints","val","endpoint","filter","r","couldCheckStates","keys","state","bestOldOne","lastTimeWasOk","getDBs","dbs","sort","reverse","filteredDBs","verifyConnectionStates","currentTime","promises","endpointObj","endpointUrl","version","isok","time","dbEndpointObj","dbEndpoint","all","FidjPouch","require","default","PouchAdapterCordovaSqlite","plugin","Session","db","dbRecordCount","dbLastSync","remoteDb","create","uid","opts","location","adapter","setRemote","sync","userId","remoteUri","replicate","to","on","doc","fidjUserId","oid","ave","crypto","dataWithoutIds","toStore","fidjOrgId","fidjAppVersion","_rev","fidjData","resultAsString","write","fidjDacr","response","ok","id","rev","data_id","_deleted","resultAsJson","extractJson","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","InternalService","logger","promise","org","log","warn","tools.LocalStorage","session","session.Session","connection","connection.Connection","fidjInit","fidjId","self","fidjVersion","theBestUrl","theBestOldUrl","fidjIsLogin","connection.Client","fidjLogin","_removeAll","_createSession","_loginInternal","fidjLoginInDemoMode","now","setDate","getDate","tomorrow","tools.Base64","endpoints","jwtSign","fidjGetEndpoints","showBlocked","fidjRoles","fidjMessage","fidjLogout","fidjSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","resolveEmpty","rejectEmptyNotUsed","ret","Function","doc_count","errMessage","fidjPutInDb","_generateObjectUniqueId","fidjRemoveInDb","fidjFindInDb","fidjFindAllInDb","results","fidjPostOnEndpoint","jwt","Authorization","fidjGetIdToken","loginUser","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","FidjService","LoggerService","fidjService","init","FidjError","loginAsDemo","isLoggedIn","getRoles","getEndpoints","postOnEndpoint","getMessage","find","findAll","Injectable","FidjModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return decodeURIComponent(atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","export class XHRPromise {\n\n    public DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';\n    private _xhr;\n    private _unloadHandler: any;\n\n    constructor() {\n    };\n\n    /*\n     * XHRPromise.send(options) -> Promise\n     * - options (Object): URL, method, data, etc.\n     *\n     * Create the XHR object and wire up event handlers to use a promise.\n     */\n    send(options): Promise<any> {\n        let defaults;\n        if (options == null) {\n            options = {};\n        }\n        defaults = {\n            method: 'GET',\n            data: null,\n            headers: {},\n            async: true,\n            username: null,\n            password: null,\n            withCredentials: false\n        };\n        options = Object.assign({}, defaults, options);\n        return new Promise(( (_this: XHRPromise) => {\n            return  (resolve, reject) => {\n                let e, header, ref, value, xhr;\n                if (!XMLHttpRequest) {\n                    _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                    return;\n                }\n                if (typeof options.url !== 'string' || options.url.length === 0) {\n                    _this._handleError('url', reject, null, 'URL is a required parameter');\n                    return;\n                }\n                _this._xhr = xhr = new XMLHttpRequest;\n                xhr.onload =  ()  => {\n                    let responseText;\n                    _this._detachWindowUnload();\n                    try {\n                        responseText = _this._getResponseText();\n                    } catch (_error) {\n                        _this._handleError('parse', reject, null, 'invalid JSON response');\n                        return;\n                    }\n                    return resolve({\n                        url: _this._getResponseUrl(),\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: responseText,\n                        headers: _this._getHeaders(),\n                        xhr: xhr\n                    });\n                };\n                xhr.onerror =  () => {\n                    return _this._handleError('error', reject);\n                };\n                xhr.ontimeout =  () => {\n                    return _this._handleError('timeout', reject);\n                };\n                xhr.onabort =  () => {\n                    return _this._handleError('abort', reject);\n                };\n                _this._attachWindowUnload();\n                xhr.open(options.method, options.url, options.async, options.username, options.password);\n                if (options.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                if ((options.data != null) && !options.headers['Content-Type']) {\n                    options.headers['Content-Type'] = _this.DEFAULT_CONTENT_TYPE;\n                }\n                ref = options.headers;\n                for (header in ref) {\n                    if (ref.hasOwnProperty(header)) {\n                        value = ref[header];\n                        xhr.setRequestHeader(header, value);\n                    }\n                }\n                try {\n                    return xhr.send(options.data);\n                } catch (_error) {\n                    e = _error;\n                    return _this._handleError('send', reject, null, e.toString());\n                }\n            };\n        })(this));\n    };\n\n\n    /*\n     * XHRPromise.getXHR() -> XMLHttpRequest\n     */\n    getXHR() {\n        return this._xhr;\n    };\n\n\n    /*\n     * XHRPromise._attachWindowUnload()\n     *\n     * Fix for IE 9 and IE 10\n     * Internet Explorer freezes when you close a webpage during an XHR request\n     * https://support.microsoft.com/kb/2856746\n     *\n     */\n    private _attachWindowUnload() {\n        this._unloadHandler = this._handleWindowUnload.bind(this);\n        if ((window as any).attachEvent) {\n            return (window as any).attachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._detachWindowUnload()\n     */\n    private _detachWindowUnload() {\n        if ((window as any).detachEvent) {\n            return (window as any).detachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._getHeaders() -> Object\n     */\n    private _getHeaders() {\n        return this._parseHeaders(this._xhr.getAllResponseHeaders());\n    };\n\n\n    /*\n     * XHRPromise._getResponseText() -> Mixed\n     *\n     * Parses response text JSON if present.\n     */\n    private _getResponseText() {\n        let responseText;\n        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';\n        switch ((this._xhr.getResponseHeader('Content-Type') || '').split(';')[0]) {\n            case 'application/json':\n            case 'text/javascript':\n                responseText = JSON.parse(responseText + '');\n        }\n        return responseText;\n    };\n\n\n    /*\n     * XHRPromise._getResponseUrl() -> String\n     *\n     * Actual response URL after following redirects.\n     */\n    private _getResponseUrl() {\n        if (this._xhr.responseURL != null) {\n            return this._xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {\n            return this._xhr.getResponseHeader('X-Request-URL');\n        }\n        return '';\n    };\n\n\n    /*\n     * XHRPromise._handleError(reason, reject, status, statusText)\n     * - reason (String)\n     * - reject (Function)\n     * - status (String)\n     * - statusText (String)\n     */\n    private _handleError(reason, reject, status?, statusText?) {\n        this._detachWindowUnload();\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n        // console.log('_handleError:', reason, this._xhr.status);\n        let code = 404;\n        if (reason === 'timeout') {\n            code = 408;\n        } else if (reason === 'abort') {\n            code = 408;\n        }\n\n        return reject({\n            reason: reason,\n            status: status || this._xhr.status || code,\n            code: status || this._xhr.status || code,\n            statusText: statusText || this._xhr.statusText,\n            xhr: this._xhr\n        });\n    };\n\n\n    /*\n     * XHRPromise._handleWindowUnload()\n     */\n    private _handleWindowUnload() {\n        return this._xhr.abort();\n    };\n\n\n    private trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n    }\n\n    private isArray(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\n\n    private forEach(list, iterator) {\n        if (toString.call(list) === '[object Array]') {\n            this.forEachArray(list, iterator, this)\n        } else if (typeof list === 'string') {\n            this.forEachString(list, iterator, this)\n        } else {\n            this.forEachObject(list, iterator, this)\n        }\n    }\n\n    private forEachArray(array, iterator, context) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (array.hasOwnProperty(i)) {\n                iterator.call(context, array[i], i, array)\n            }\n        }\n    }\n\n    private forEachString(string, iterator, context) {\n        for (let i = 0, len = string.length; i < len; i++) {\n            // no such thing as a sparse string.\n            iterator.call(context, string.charAt(i), i, string)\n        }\n    }\n\n    private forEachObject(object, iterator, context) {\n        for (const k in object) {\n            if (object.hasOwnProperty(k)) {\n                iterator.call(context, object[k], k, object)\n            }\n        }\n    }\n\n    private _parseHeaders(headers) {\n        if (!headers) {\n            return {};\n        }\n\n        const result = {};\n\n        this.forEach(\n            this.trim(headers).split('\\n')\n            , (row) => {\n                const index = row.indexOf(':')\n                    , key = this.trim(row.slice(0, index)).toLowerCase()\n                    , value = this.trim(row.slice(index + 1));\n\n                if (typeof(result[key]) === 'undefined') {\n                    result[key] = value\n                } else if (this.isArray(result[key])) {\n                    result[key].push(value)\n                } else {\n                    result[key] = [result[key], value]\n                }\n            }\n        );\n\n        return result;\n    }\n\n\n}\n","import {XHRPromise} from './xhrpromise';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr: XHRPromise;\n\n    constructor() {\n        this.xhr = new XHRPromise();\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n\n                // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                // _this._handleError('url', reject, null, 'URL is a required parameter');\n                // _this._handleError('parse', reject, null, 'invalid JSON response');\n                // return _this._handleError('error', reject);\n                // return _this._handleError('timeout', reject);\n                // return _this._handleError('abort', reject);\n                // return _this._handleError('send', reject, null, e.toString());\n\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n}\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    private refreshToken: string;\n    private static refreshCount = 0;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (window && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (window && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || 0;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    public login(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        return new Ajax()\n            .post({\n                url: urlLogin,\n                data: dataLogin,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then(createdUser => {\n\n                this.setClientId(createdUser._id);\n                const urlToken = this.URI + '/oauth/token';\n                const dataToken = {\n                    grant_type: 'client_credentials',\n                    client_id: this.clientId,\n                    client_secret: password,\n                    client_udid: this.clientUuid,\n                    client_info: this.clientInfo,\n                    audience: this.appId,\n                    scope: JSON.stringify(this.sdk)\n                };\n                return new Ajax()\n                    .post({\n                        url: urlToken,\n                        data: dataToken,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    });\n            });\n    }\n\n    public reAuthenticate(refreshToken: string): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/oauth/token';\n        const data = {\n            grant_type: 'refresh_token',\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: refreshToken,\n            refresh_extra: Client.refreshCount,\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then((obj: any) => {\n                Client.refreshCount++;\n                this.storage.set(Client._refreshCount, Client.refreshCount);\n                return Promise.resolve(obj);\n            });\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = 0;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/oauth/revoke';\n        const data = {\n            token: refreshToken,\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ConnectionFindOptionsInterface} from './interfaces';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: any;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    destroy(force?: boolean): void {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        if (!this.user) {\n            this.user = {};\n        }\n\n        // this._user._id = this._client.clientId;\n        this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: any): void {\n        this.user = user;\n        if (this.user._id) {\n            this.client.setClientId(this.user._id);\n\n            // store only clientId\n            delete this.user._id;\n        }\n    }\n\n    getUser(): any {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    getIdToken(): string {\n        return this.idToken;\n    }\n\n    getIdPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.getIdToken().split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    refreshConnection(): Promise<any | ErrorInterface> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            if ((new Date().getTime() / 1000) < JSON.parse(decoded).exp) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            if ((new Date().getTime() / 1000) >= JSON.parse(decoded).exp) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        return new Promise((resolve, reject) => {\n            this.getClient().reAuthenticate(this.refreshToken)\n                .then(user => {\n                    this.setConnection(user);\n                    resolve(this.getUser());\n                })\n                .catch(err => {\n\n                    // if (err && err.code === 408) {\n                    //     code = 408; // no api uri or basic timeout : offline\n                    // } else if (err && err.code === 404) {\n                    //     code = 404; // page not found : offline\n                    // } else if (err && err.code === 410) {\n                    //     code = 403; // token expired or device not sure : need relogin\n                    // } else if (err) {\n                    //     code = 403; // forbidden : need relogin\n                    // }\n\n                    // resolve(code);\n                    reject(err);\n                });\n        });\n    };\n\n    setConnection(clientUser: any): void {\n\n        // only in private storage\n        if (clientUser.access_token) {\n            this.accessToken = clientUser.access_token;\n            this._storage.set(Connection._accessToken, this.accessToken);\n            delete clientUser.access_token;\n\n            const salt: string = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientUser.id_token) {\n            this.idToken = clientUser.id_token;\n            this._storage.set(Connection._idToken, this.idToken);\n            delete clientUser.id_token;\n        }\n        if (clientUser.refresh_token) {\n            this.refreshToken = clientUser.refresh_token;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n            delete clientUser.refresh_token;\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        // clientUser.roles = self.fidjRoles();\n        // clientUser.message = self.fidjMessage();\n        clientUser.roles = JSON.parse(this.getIdPayload({roles: []})).roles;\n        clientUser.message = JSON.parse(this.getIdPayload({message: ''})).message;\n        this.setUser(clientUser);\n    };\n\n    setConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser({\n            roles: JSON.parse(this.getIdPayload({roles: []})).roles,\n            message: JSON.parse(this.getIdPayload({message: ''})).message,\n            _id: 'demo'\n        });\n    }\n\n    getApiEndpoints(options?: ConnectionFindOptionsInterface): Array<EndpointInterface> {\n\n        // todo : let ea = ['https://fidj/api', 'https://fidj-proxy.herokuapp.com/api'];\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://fidj.ovh/api', blocked: false}];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:5894/api', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/api', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    getDBs(options?: ConnectionFindOptionsInterface): EndpointInterface[] {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(new Promise((resolve, reject) => {\n                new Ajax()\n                    .get({\n                        url: endpointUrl + '/status?isok=' + this._sdk.version,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    })\n                    .then(data => {\n                        let state = false;\n                        if (data && data.isok) {\n                            state = true;\n                        }\n                        this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n                        resolve();\n                    })\n                    .catch(err => {\n                        let lastTimeWasOk = 0;\n                        if (this.states[endpointUrl]) {\n                            lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n                        }\n                        this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n                        resolve();\n                    });\n            }));\n        });\n\n        const dbs = this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(new Promise((resolve, reject) => {\n                new Ajax()\n                    .get({\n                        url: dbEndpoint,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    })\n                    .then(data => {\n                        this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n                        resolve();\n                    })\n                    .catch(err => {\n                        let lastTimeWasOk = 0;\n                        if (this.states[dbEndpoint]) {\n                            lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n                        }\n                        this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n                        resolve();\n                    });\n            }));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nconst FidjPouch = window['PouchDB'] ? window['PouchDB'] : require('pouchdb').default; // .default;\n\n// load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\nconst PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\nFidjPouch.plugin(PouchAdapterCordovaSqlite);\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n\n    public create(uid: string, force?: boolean): Promise<void | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve();\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err))\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public destroy(): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: err}))\n                            .on('error', (err) => reject({code: 401, reason: err}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason: err}))\n                    .on('error', (err) => reject({code: 401, reason: err}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof(item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof(item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof(result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false\n        };\n        this.logger = {\n            log: () => {\n            },\n            error: () => {\n            },\n            warn: () => {\n            }\n        };\n        if (logger && window.console && logger === window.console) {\n            this.logger.error = window.console.error;\n            this.logger.warn = window.console.warn;\n        }\n        this.logger.log('fidj.sdk.service : constructor');\n        if (promise) {\n            this.promise = promise;\n        }\n        this.storage = new tools.LocalStorage(window.localStorage, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     */\n    public fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            self.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return self.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        self.sdk.prod = !options ? true : options.prod;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n                    self.connection.fidjId = fidjId;\n                    self.connection.fidjVersion = self.sdk.version;\n                    self.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? true : options.crypto;\n\n                    let theBestUrl: any = self.connection.getApiEndpoints({filter: 'theBestOne'})[0];\n                    let theBestOldUrl: any = self.connection.getApiEndpoints({filter: 'theBestOldOne'})[0];\n                    const isLogin = self.fidjIsLogin();\n\n                    if (theBestUrl && theBestUrl.url) {\n                        theBestUrl = theBestUrl.url;\n                    }\n                    if (theBestOldUrl && theBestOldUrl.url) {\n                        theBestOldUrl = theBestOldUrl.url;\n                    }\n\n                    if (theBestUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestUrl, self.storage, self.sdk));\n                        resolve();\n                    } else if (isLogin && theBestOldUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestOldUrl, self.storage, self.sdk));\n                        resolve();\n                    } else {\n                        reject(new Error(404, 'Need one connection - or too old SDK version (check update)'));\n                    }\n\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjInit: ', err);\n                    reject(new Error(500, err.toString()));\n                });\n        });\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @returns\n     */\n    public fidjLogin(login: string, password: string): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjLogin');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(404, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self.connection.verifyConnectionStates();\n                })\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    return self._loginInternal(login, password);\n                })\n                .then((user) => {\n                    self.connection.setConnection(user);\n                    self.session.sync(self.connection.getClientId())\n                        .then(() => resolve(self.connection.getUser()))\n                        .catch((err) => resolve(self.connection.getUser()));\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLogin: ', err.toString());\n                    reject(err);\n                });\n        });\n    };\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: {},\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLogin error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjGetEndpoints(filter?: EndpointFilterInterface): Array<EndpointInterface> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        let endpoints = JSON.parse(this.connection.getAccessPayload({endpoints: []})).endpoints;\n        if (!endpoints) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public fidjRoles(): Array<string> {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public fidjMessage(): string {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public fidjLogout(): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient()) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new Promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during syncronisation: ' + err.toString();\n                        // self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(401, 'DB remove impossible. ' +\n                'Need a user logged in.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject(new Error(401, 'fidj.sdk.service.fidjFindInDb : need a user logged in.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public fidjPostOnEndpoint(key: string, data?: any): Promise<any | ErrorInterface> {\n        const filter: EndpointFilterInterface = {\n            key: key\n        };\n        const endpoints = this.fidjGetEndpoints(filter);\n        if (!endpoints || endpoints.length !== 1) {\n            return this.promise.reject(\n                new Error(400,\n                    'fidj.sdk.service.fidjPostOnEndpoint : endpoint does not exist.'));\n        }\n\n        const endpointUrl = endpoints[0].url;\n        const jwt = this.connection.getIdToken();\n        return new Ajax()\n            .post({\n                url: endpointUrl,\n                // not used : withCredentials: true,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + jwt\n                },\n                data: data\n            });\n    };\n\n    public fidjGetIdToken(): string {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     */\n    private _loginInternal(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(403, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.logout()\n                    .then(() => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .catch((err) => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(loginUser => {\n                        loginUser.email = login;\n                        resolve(loginUser);\n                    })\n                    .catch(err => {\n                        self.logger.error('fidj.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n\n    protected _removeAll(): Promise<void | ErrorInterface> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n\n    private _createSession(uid: string): Promise<void | ErrorInterface> {\n        this.session.setRemote(this.connection.getDBs({filter: 'theBestOnes'}));\n        return this.session.create(uid);\n    };\n\n    private _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","// bumped version via gulp\nexport const version = '2.1.12';\n","import {Injectable} from '@angular/core';\nimport {\n    LoggerInterface, ModuleServiceInterface, ModuleServiceInitOptionsInterface, ModuleServiceLoginOptionsInterface,\n    ErrorInterface, EndpointInterface\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\n\n/**\n * Angular2+ FidjService\n * @see ModuleServiceInterface\n *\n * @exemple\n *      // ... after install :\n *      // $ npm install --save-dev fidj\n *      // then init your app.js & use it in your services\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.inject.js\"></script>\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.sync.js\"></script>\n *\n *\n */\n@Injectable()\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService();\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public init(fidjId, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        /*\n        if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public login(login, password): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular2.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public getRoles(): Array<string> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjRoles();\n    };\n\n    public getEndpoints(): Array<EndpointInterface> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    public postOnEndpoint(key: string, data: any): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjPostOnEndpoint(key, data);\n    };\n\n    public getIdToken(): string {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public getMessage(): string {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public logout(): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout();\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n\nexport class LoggerService implements LoggerInterface {\n    log(message: string) {\n        // console.log(message);\n    }\n\n    error(message: string) {\n        console.error(message);\n    }\n\n    warn(message: string) {\n        console.warn(message);\n    }\n}\n\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FidjService} from './angular.service';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n\n    providers: [FidjService]\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n"]}