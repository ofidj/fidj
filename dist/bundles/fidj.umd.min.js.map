{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://fidj/tools/base64.ts","ng://fidj/tools/storage.ts","ng://fidj/tools/xor.ts","ng://fidj/version/index.ts","ng://fidj/connection/xhrpromise.ts","ng://fidj/connection/ajax.ts","ng://fidj/connection/client.ts","ng://fidj/sdk/error.ts","ng://fidj/connection/connection.ts","ng://fidj/session/session.ts","ng://fidj/sdk/interfaces.ts","ng://fidj/sdk/logger.service.ts","ng://fidj/sdk/internal.service.ts","ng://fidj/sdk/angular.service.ts","ng://fidj/sdk/fidj.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","push","Base64","encode","input","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","decodeURIComponent","atob","split","map","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","version","storage","window","localStorage","Error","prototype","set","checkKey","JSON","stringify","string","number","bool","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","size","foreach","context","Xor","encrypt","header","keyCharAt","decrypt","oldStyle","substring","Math","floor","XHRPromise","DEFAULT_CONTENT_TYPE","send","options","defaults","_this","method","data","headers","async","username","password","withCredentials","assign","ref","xhr","XMLHttpRequest","url","_xhr","onload","responseText","_detachWindowUnload","_getResponseText","_error","_handleError","_getResponseUrl","status","statusText","_getHeaders","onerror","ontimeout","onabort","_attachWindowUnload","open","hasOwnProperty","setRequestHeader","getXHR","_unloadHandler","_handleWindowUnload","bind","attachEvent","detachEvent","_parseHeaders","getAllResponseHeaders","getResponseHeader","responseURL","test","reason","code","abort","trim","str","isArray","arg","forEach","list","forEachArray","forEachString","forEachObject","array","len","charAt","object","k","_this_1","row","index","indexOf","toLowerCase","Ajax","post","args","opt","res","catch","err","put","delete","Client","appId","URI","sdk","uuid","_clientUuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","clientId","_clientId","refreshCount","_refreshCount","refreshCountInitial","setClientId","clientUuid","clientInfo","login","updateProperties","console","error","urlLogin","dataLogin","name","email","Content-Type","Accept","createdUser","_id","urlToken","dataToken","grant_type","client_id","client_secret","client_udid","client_info","audience","scope","reAuthenticate","refreshToken","refresh_token","refresh_extra","obj","logout","token","isReady","Error$1","equals","msg","Connection","_sdk","_storage","_logger","client","user","cryptoSalt","_cryptoSalt","cryptoSaltNext","_cryptoSaltNext","accessToken","_accessToken","accessTokenPrevious","idToken","_idToken","_refreshToken","states","_states","apis","destroy","force","_accessTokenPrevious","setClient","_name","getIdPayload","setUser","getUser","getClient","setCryptoSalt","setCryptoSaltAsVerified","dataAsObj","fidjCrypto","decrypted","isLogin","exp","payload","decoded","Date","getTime","getClientId","getIdToken","getAccessPayload","getPreviousAccessPayload","refreshConnection","notExpired","log","expired","setConnection","clientUser","access_token","salt","id_token","roles","message","setConnectionOffline","getApiEndpoints","ea","blocked","filteredEa","prod","apiEndpoints","val","endpoint","filter","couldCheckStates","keys","state","bestOldOne","lastTimeWasOk","getDBs","dbs","sort","reverse","filteredDBs","verifyApiState","currentTime","endpointUrl","_a","isok","time","verifyDbState","dbEndpoint","verifyConnectionStates","promises","endpointObj","dbEndpointObj","all","FidjPouch","require","default","PouchAdapterCordovaSqlite","plugin","LoggerLevelEnum","Session","db","dbRecordCount","dbLastSync","remoteDb","create","uid","opts","location","adapter","setRemote","sync","userId","remoteUri","replicate","to","on","doc","fidjUserId","second","first","oid","ave","crypto","dataWithoutIds","toStore","fidjOrgId","fidjAppVersion","_rev","fidjData","resultAsString","write","fidjDacr","response","ok","id","rev","data_id","_deleted","resultAsJson","extractJson","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","LoggerService","level","ERROR","NONE","LOG","warn","WARN","setLevel","InternalService","logger","promise","org","version.version","ls","tools.LocalStorage","session","session.Session","connection","connection.Connection","fidjInit","fidjId","self","logLevel","fidjVersion","theBestUrl","theBestOldUrl","fidjIsLogin","connection.Client","fidjLogin","_removeAll","_createSession","_loginInternal","fidjLoginInDemoMode","now","setDate","getDate","tomorrow","tools.Base64","endpoints","jwtSign","fidjGetEndpoints","showBlocked","ap","Array","fidjRoles","fidjMessage","fidjLogout","fidjSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","resolveEmpty","rejectEmptyNotUsed","ret","Function","doc_count","errMessage","fidjPutInDb","_generateObjectUniqueId","fidjRemoveInDb","fidjFindInDb","fidjFindAllInDb","results","fidjPostOnEndpoint","jwt","Authorization","fidjGetIdToken","loginUser","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","FidjService","fidjService","init","FidjError","loginAsDemo","isLoggedIn","getRoles","getEndpoints","postOnEndpoint","getMessage","find","findAll","Injectable","FidjModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return decodeURIComponent(atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","// bumped version via gulp\nexport const version = '2.1.27';\n","export class XHRPromise {\n\n    public DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';\n    private _xhr;\n    private _unloadHandler: any;\n\n    constructor() {\n    };\n\n    /*\n     * XHRPromise.send(options) -> Promise\n     * - options (Object): URL, method, data, etc.\n     *\n     * Create the XHR object and wire up event handlers to use a promise.\n     */\n    send(options): Promise<any> {\n        let defaults;\n        if (options == null) {\n            options = {};\n        }\n        defaults = {\n            method: 'GET',\n            data: null,\n            headers: {},\n            async: true,\n            username: null,\n            password: null,\n            withCredentials: false\n        };\n        options = Object.assign({}, defaults, options);\n        return new Promise(( (_this: XHRPromise) => {\n            return  (resolve, reject) => {\n                let e, header, ref, value, xhr;\n                if (!XMLHttpRequest) {\n                    _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                    return;\n                }\n                if (typeof options.url !== 'string' || options.url.length === 0) {\n                    _this._handleError('url', reject, null, 'URL is a required parameter');\n                    return;\n                }\n                _this._xhr = xhr = new XMLHttpRequest;\n                xhr.onload =  ()  => {\n                    let responseText;\n                    _this._detachWindowUnload();\n                    try {\n                        responseText = _this._getResponseText();\n                    } catch (_error) {\n                        _this._handleError('parse', reject, null, 'invalid JSON response');\n                        return;\n                    }\n                    return resolve({\n                        url: _this._getResponseUrl(),\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: responseText,\n                        headers: _this._getHeaders(),\n                        xhr: xhr\n                    });\n                };\n                xhr.onerror =  () => {\n                    return _this._handleError('error', reject);\n                };\n                xhr.ontimeout =  () => {\n                    return _this._handleError('timeout', reject);\n                };\n                xhr.onabort =  () => {\n                    return _this._handleError('abort', reject);\n                };\n                _this._attachWindowUnload();\n                xhr.open(options.method, options.url, options.async, options.username, options.password);\n                if (options.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                if ((options.data != null) && !options.headers['Content-Type']) {\n                    options.headers['Content-Type'] = _this.DEFAULT_CONTENT_TYPE;\n                }\n                ref = options.headers;\n                for (header in ref) {\n                    if (ref.hasOwnProperty(header)) {\n                        value = ref[header];\n                        xhr.setRequestHeader(header, value);\n                    }\n                }\n                try {\n                    return xhr.send(options.data);\n                } catch (_error) {\n                    e = _error;\n                    return _this._handleError('send', reject, null, e.toString());\n                }\n            };\n        })(this));\n    };\n\n\n    /*\n     * XHRPromise.getXHR() -> XMLHttpRequest\n     */\n    getXHR() {\n        return this._xhr;\n    };\n\n\n    /*\n     * XHRPromise._attachWindowUnload()\n     *\n     * Fix for IE 9 and IE 10\n     * Internet Explorer freezes when you close a webpage during an XHR request\n     * https://support.microsoft.com/kb/2856746\n     *\n     */\n    private _attachWindowUnload() {\n        this._unloadHandler = this._handleWindowUnload.bind(this);\n        if ((window as any).attachEvent) {\n            return (window as any).attachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._detachWindowUnload()\n     */\n    private _detachWindowUnload() {\n        if ((window as any).detachEvent) {\n            return (window as any).detachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._getHeaders() -> Object\n     */\n    private _getHeaders() {\n        return this._parseHeaders(this._xhr.getAllResponseHeaders());\n    };\n\n\n    /*\n     * XHRPromise._getResponseText() -> Mixed\n     *\n     * Parses response text JSON if present.\n     */\n    private _getResponseText() {\n        let responseText;\n        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';\n        switch ((this._xhr.getResponseHeader('Content-Type') || '').split(';')[0]) {\n            case 'application/json':\n            case 'text/javascript':\n                responseText = JSON.parse(responseText + '');\n        }\n        return responseText;\n    };\n\n\n    /*\n     * XHRPromise._getResponseUrl() -> String\n     *\n     * Actual response URL after following redirects.\n     */\n    private _getResponseUrl() {\n        if (this._xhr.responseURL != null) {\n            return this._xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {\n            return this._xhr.getResponseHeader('X-Request-URL');\n        }\n        return '';\n    };\n\n\n    /*\n     * XHRPromise._handleError(reason, reject, status, statusText)\n     * - reason (String)\n     * - reject (Function)\n     * - status (String)\n     * - statusText (String)\n     */\n    private _handleError(reason, reject, status?, statusText?) {\n        this._detachWindowUnload();\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n        // console.log('_handleError:', reason, this._xhr.status);\n        let code = 404;\n        if (reason === 'timeout') {\n            code = 408;\n        } else if (reason === 'abort') {\n            code = 408;\n        }\n\n        return reject({\n            reason: reason,\n            status: status || this._xhr.status || code,\n            code: status || this._xhr.status || code,\n            statusText: statusText || this._xhr.statusText,\n            xhr: this._xhr\n        });\n    };\n\n\n    /*\n     * XHRPromise._handleWindowUnload()\n     */\n    private _handleWindowUnload() {\n        return this._xhr.abort();\n    };\n\n\n    private trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n    }\n\n    private isArray(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\n\n    private forEach(list, iterator) {\n        if (toString.call(list) === '[object Array]') {\n            this.forEachArray(list, iterator, this)\n        } else if (typeof list === 'string') {\n            this.forEachString(list, iterator, this)\n        } else {\n            this.forEachObject(list, iterator, this)\n        }\n    }\n\n    private forEachArray(array, iterator, context) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (array.hasOwnProperty(i)) {\n                iterator.call(context, array[i], i, array)\n            }\n        }\n    }\n\n    private forEachString(string, iterator, context) {\n        for (let i = 0, len = string.length; i < len; i++) {\n            // no such thing as a sparse string.\n            iterator.call(context, string.charAt(i), i, string)\n        }\n    }\n\n    private forEachObject(object, iterator, context) {\n        for (const k in object) {\n            if (object.hasOwnProperty(k)) {\n                iterator.call(context, object[k], k, object)\n            }\n        }\n    }\n\n    private _parseHeaders(headers) {\n        if (!headers) {\n            return {};\n        }\n\n        const result = {};\n\n        this.forEach(\n            this.trim(headers).split('\\n')\n            , (row) => {\n                const index = row.indexOf(':')\n                    , key = this.trim(row.slice(0, index)).toLowerCase()\n                    , value = this.trim(row.slice(index + 1));\n\n                if (typeof(result[key]) === 'undefined') {\n                    result[key] = value\n                } else if (this.isArray(result[key])) {\n                    result[key].push(value)\n                } else {\n                    result[key] = [result[key], value]\n                }\n            }\n        );\n\n        return result;\n    }\n\n\n}\n","import {XHRPromise} from './xhrpromise';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr: XHRPromise;\n\n    constructor() {\n        this.xhr = new XHRPromise();\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n\n                // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                // _this._handleError('url', reject, null, 'URL is a required parameter');\n                // _this._handleError('parse', reject, null, 'invalid JSON response');\n                // return _this._handleError('error', reject);\n                // return _this._handleError('timeout', reject);\n                // return _this._handleError('abort', reject);\n                // return _this._handleError('send', reject, null, e.toString());\n\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n}\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    // private refreshToken: string;\n    private static refreshCountInitial = 1;\n    private static refreshCount = Client.refreshCountInitial;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (window && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (window && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    public login(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        return new Ajax()\n            .post({\n                url: urlLogin,\n                data: dataLogin,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then(createdUser => {\n\n                this.setClientId(createdUser._id);\n                const urlToken = this.URI + '/oauth/token';\n                const dataToken = {\n                    grant_type: 'client_credentials',\n                    client_id: this.clientId,\n                    client_secret: password,\n                    client_udid: this.clientUuid,\n                    client_info: this.clientInfo,\n                    audience: this.appId,\n                    scope: JSON.stringify(this.sdk)\n                };\n                return new Ajax()\n                    .post({\n                        url: urlToken,\n                        data: dataToken,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    });\n            });\n    }\n\n    public reAuthenticate(refreshToken: string): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/oauth/token';\n        const data = {\n            grant_type: 'refresh_token',\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: refreshToken,\n            refresh_extra: Client.refreshCount,\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then((obj: any) => {\n                Client.refreshCount++;\n                this.storage.set(Client._refreshCount, Client.refreshCount);\n                return Promise.resolve(obj);\n            });\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = Client.refreshCountInitial;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/oauth/revoke';\n        const data = {\n            token: refreshToken,\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface, LoggerInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ConnectionFindOptionsInterface} from './interfaces';\nimport {Error} from '../sdk/error';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: any;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage,\n                private _logger: LoggerInterface) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    destroy(force?: boolean): void {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        if (!this.user) {\n            this.user = {};\n        }\n\n        // this._user._id = this._client.clientId;\n        this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: any): void {\n        this.user = user;\n        if (this.client && this.user._id) {\n            this.client.setClientId(this.user._id);\n\n            // store only clientId\n            delete this.user._id;\n        }\n    }\n\n    getUser(): any {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    getIdToken(): string {\n        return this.idToken;\n    }\n\n    getIdPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.getIdToken().split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    refreshConnection(): Promise<any | ErrorInterface> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const notExpired = (new Date().getTime() / 1000) < JSON.parse(decoded).exp;\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            this._logger.log('fidj.connection.connection.refreshConnection : token not expired ? ', notExpired);\n            if (notExpired) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const expired = (new Date().getTime() / 1000) >= JSON.parse(decoded).exp;\n            this._logger.log('fidj.connection.connection.refreshConnection : refreshToken not expired ? ', expired);\n            if (expired) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        this._logger.log('fidj.connection.connection.refreshConnection : refresh authentication.');\n        return new Promise((resolve, reject) => {\n            const client = this.getClient();\n\n            if (!client) {\n                return reject(new Error(400, 'Need an initialized client.'))\n            }\n\n            this.getClient().reAuthenticate(this.refreshToken)\n                .then(user => {\n                    this.setConnection(user);\n                    resolve(this.getUser());\n                })\n                .catch(err => {\n\n                    // if (err && err.code === 408) {\n                    //     code = 408; // no api uri or basic timeout : offline\n                    // } else if (err && err.code === 404) {\n                    //     code = 404; // page not found : offline\n                    // } else if (err && err.code === 410) {\n                    //     code = 403; // token expired or device not sure : need relogin\n                    // } else if (err) {\n                    //     code = 403; // forbidden : need relogin\n                    // }\n\n                    // resolve(code);\n                    reject(err);\n                });\n        });\n    };\n\n    setConnection(clientUser: any): void {\n\n        // only in private storage\n        if (clientUser.access_token) {\n            this.accessToken = clientUser.access_token;\n            this._storage.set(Connection._accessToken, this.accessToken);\n            delete clientUser.access_token;\n\n            const salt: string = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientUser.id_token) {\n            this.idToken = clientUser.id_token;\n            this._storage.set(Connection._idToken, this.idToken);\n            delete clientUser.id_token;\n        }\n        if (clientUser.refresh_token) {\n            this.refreshToken = clientUser.refresh_token;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n            delete clientUser.refresh_token;\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        // clientUser.roles = self.fidjRoles();\n        // clientUser.message = self.fidjMessage();\n        clientUser.roles = JSON.parse(this.getIdPayload({roles: []})).roles;\n        clientUser.message = JSON.parse(this.getIdPayload({message: ''})).message;\n        this.setUser(clientUser);\n    };\n\n    setConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser({\n            roles: JSON.parse(this.getIdPayload({roles: []})).roles,\n            message: JSON.parse(this.getIdPayload({message: ''})).message,\n            _id: 'demo'\n        });\n    }\n\n    getApiEndpoints(options?: ConnectionFindOptionsInterface): Array<EndpointInterface> {\n\n        // todo : let ea = ['https://fidj/api', 'https://fidj-proxy.herokuapp.com/api'];\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://fidj.ovh/api', blocked: false}];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:3201/api', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/api', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    getDBs(options?: ConnectionFindOptionsInterface): EndpointInterface[] {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    private async verifyApiState(currentTime: number, endpointUrl: string) {\n\n        try {\n\n            // console.log('verifyApiState: ', endpointUrl);\n            const data = await new Ajax()\n                .get({\n                    url: endpointUrl + '/status?isok=' + this._sdk.version,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            let state = false;\n            if (data && data.isok) {\n                state = true;\n            }\n            this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyApiState: state', endpointUrl, state);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[endpointUrl]) {\n                lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n            }\n            this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n        // console.log('verifyApiState: ', this.states);\n    }\n\n    private async verifyDbState(currentTime: number, dbEndpoint: string) {\n\n        try {\n            // console.log('verifyDbState: ', dbEndpoint);\n            const data = await new Ajax()\n                .get({\n                    url: dbEndpoint,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyDbState: state', dbEndpoint, true);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[dbEndpoint]) {\n                lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n            }\n            this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n    }\n\n    verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(this.verifyApiState(currentTime, endpointUrl));\n        });\n\n        const dbs = this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(this.verifyDbState(currentTime, dbEndpoint));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nconst FidjPouch = (window && window['PouchDB']) ? window['PouchDB'] : require('pouchdb').default; // .default;\n\n// load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\nconst PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\nFidjPouch.plugin(PouchAdapterCordovaSqlite);\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n\n    public create(uid: string, force?: boolean): Promise<void | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve();\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n        uid = uid || 'default';\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window && window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err))\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public destroy(): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: {second: err}}))\n                            .on('error', (err) => reject({code: 401, reason:  {second: err}}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason:  {first: err}}))\n                    .on('error', (err) => reject({code: 401, reason:  {first: err}}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof (item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof (item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof (result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","// export namespace fidj {\n// }\nexport interface ErrorInterface {\n    code: number;\n    reason: string;\n}\n\nexport interface EndpointInterface {\n    key: string;\n    url: string;\n    blocked: boolean;\n}\n\nexport interface EndpointFilterInterface {\n    key?: string;\n    showBlocked?: boolean;\n}\n\n/**\n * Interface used by all InternalService wrappers (angular.js, angular.io)\n *\n * @see FidjModule\n * @see FidjModule, FidjAngularService\n */\nexport interface ModuleServiceInterface {\n\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n\n    isLoggedIn(): boolean;\n\n    getRoles(): Array<string>;\n\n    getEndpoints(): Array<EndpointInterface>;\n\n    postOnEndpoint(key: string, data: any): Promise<any | ErrorInterface>;\n\n    getIdToken(): string;\n\n    getMessage(): string;\n\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n\n    sync(fnInitFirstData?: any): Promise<any | ErrorInterface>;\n\n    put(data: any): Promise<any | ErrorInterface>;\n\n    remove(dataId: any): Promise<any | ErrorInterface>;\n\n    find(id: string): Promise<any | ErrorInterface>;\n\n    findAll(): Promise<any | ErrorInterface>;\n}\n\n\nexport interface ModuleServiceInitOptionsInterface {\n    prod: boolean,\n    // forcedEndpoint?: string,\n    // forcedDBEndpoint?: string,\n    crypto?: boolean,\n    logLevel?: LoggerLevelEnum\n}\n\nexport interface ModuleServiceLoginOptionsInterface {\n    accessToken?: string,\n    idToken?: string,\n    refreshToken?: string,\n}\n\nexport interface SdkInterface {\n    org: string,\n    version: string,\n    prod: boolean\n}\n\nexport enum LoggerLevelEnum {\n    LOG = 1,\n    WARN = 2,\n    ERROR = 3,\n    NONE = 4\n}\n\nexport interface LoggerInterface {\n    setLevel: (LoggerLevelEnum) => void;\n\n    log: (a?, b?, c?, d?, e?, f?) => any;\n    warn: (a?, b?, c?, d?, e?, f?) => any;\n    error: (a?, b?, c?, d?, e?, f?) => any;\n}\n","import {\n    LoggerInterface, LoggerLevelEnum\n} from './interfaces';\n\nexport class LoggerService implements LoggerInterface {\n\n    constructor(private level?: LoggerLevelEnum) {\n        if (!level) {\n            this.level = LoggerLevelEnum.ERROR;\n        }\n\n        if (!window || !window.console) {\n            this.level = LoggerLevelEnum.NONE;\n        }\n    }\n\n    log(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG) {\n            console.log(message, args);\n        }\n    }\n\n    warn(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN) {\n            console.warn(message, args);\n        }\n    }\n\n    error(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN || this.level === LoggerLevelEnum.ERROR) {\n            console.error(message, args);\n        }\n    }\n\n    setLevel(level: LoggerLevelEnum) {\n        this.level = level;\n    }\n}\n\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\nimport {LoggerService} from './logger.service';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false\n        };\n        if (promise) {\n            this.promise = promise;\n        }\n        if (logger) {\n            this.logger = logger;\n        } else {\n            this.logger = new LoggerService();\n        }\n        this.logger.log('fidj.sdk.service : constructor');\n        const ls = window ? window.localStorage : {};\n        this.storage = new tools.LocalStorage(ls, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage, this.logger);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     */\n    public fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n\n        const self = this;\n        /*\n        if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        if (options && options.logLevel) {\n            self.logger.setLevel(options.logLevel);\n        }\n\n        self.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            self.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return self.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        self.sdk.prod = !options ? true : options.prod;\n        self.connection.fidjId = fidjId;\n        self.connection.fidjVersion = self.sdk.version;\n        self.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? true : options.crypto;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n\n                    let theBestUrl: any = self.connection.getApiEndpoints({filter: 'theBestOne'})[0];\n                    let theBestOldUrl: any = self.connection.getApiEndpoints({filter: 'theBestOldOne'})[0];\n                    const isLogin = self.fidjIsLogin();\n\n                    if (theBestUrl && theBestUrl.url) {\n                        theBestUrl = theBestUrl.url;\n                    }\n                    if (theBestOldUrl && theBestOldUrl.url) {\n                        theBestOldUrl = theBestOldUrl.url;\n                    }\n\n                    if (theBestUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestUrl, self.storage, self.sdk));\n                        resolve();\n                    } else if (isLogin && theBestOldUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestOldUrl, self.storage, self.sdk));\n                        resolve();\n                    } else {\n                        reject(new Error(404, 'Need one connection - or too old SDK version (check update)'));\n                    }\n\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjInit: ', err);\n                    reject(new Error(500, err.toString()));\n                });\n        });\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @returns\n     */\n    public fidjLogin(login: string, password: string): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjLogin');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(404, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self.connection.verifyConnectionStates();\n                })\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    return self._loginInternal(login, password);\n                })\n                .then((user) => {\n                    self.connection.setConnection(user);\n                    self.session.sync(self.connection.getClientId())\n                        .then(() => resolve(self.connection.getUser()))\n                        .catch((err) => resolve(self.connection.getUser()));\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLogin: ', err.toString());\n                    reject(err);\n                });\n        });\n    };\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: [],\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLoginInDemoMode error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjGetEndpoints(filter?: EndpointFilterInterface): Array<EndpointInterface> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        const ap = this.connection.getAccessPayload({endpoints: []});\n        let endpoints = JSON.parse(ap).endpoints;\n        if (!endpoints || !Array.isArray( endpoints)) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public fidjRoles(): Array<string> {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public fidjMessage(): string {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public fidjLogout(force?: boolean): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient() && !force) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new self.promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    self.logger.log('fidj.sdk.service.fidjSync refreshConnection done : ', user);\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n                    self.logger.warn('fidj.sdk.service.fidjSync refreshConnection failed : ', err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again..'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during synchronisation: ' + err.toString();\n                        self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Find pb : need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, ' Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public fidjPostOnEndpoint(key: string, data?: any): Promise<any | ErrorInterface> {\n        const filter: EndpointFilterInterface = {\n            key: key\n        };\n        const endpoints = this.fidjGetEndpoints(filter);\n        if (!endpoints || endpoints.length !== 1) {\n            return this.promise.reject(\n                new Error(400,\n                    'fidj.sdk.service.fidjPostOnEndpoint : endpoint does not exist.'));\n        }\n\n        const endpointUrl = endpoints[0].url;\n        const jwt = this.connection.getIdToken();\n        return new Ajax()\n            .post({\n                url: endpointUrl,\n                // not used : withCredentials: true,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + jwt\n                },\n                data: data\n            });\n    };\n\n    public fidjGetIdToken(): string {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     */\n    private _loginInternal(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(403, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.logout()\n                    .then(() => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .catch((err) => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(loginUser => {\n                        loginUser.email = login;\n                        resolve(loginUser);\n                    })\n                    .catch(err => {\n                        self.logger.error('fidj.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n\n    protected _removeAll(): Promise<void | ErrorInterface> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n\n    private _createSession(uid: string): Promise<void | ErrorInterface> {\n        const dbs: EndpointInterface[] = this.connection.getDBs({filter: 'theBestOnes'});\n        if (!dbs || dbs.length === 0) {\n            this.logger.warn('Seems that you are in demo mode, no remote DB.');\n        }\n        this.session.setRemote(dbs);\n        return this.session.create(uid);\n    };\n\n    private _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","/* tslint:disable:max-line-length */\nimport {Injectable} from '@angular/core';\nimport {\n    LoggerInterface, ModuleServiceInterface, ModuleServiceInitOptionsInterface, ModuleServiceLoginOptionsInterface,\n    ErrorInterface, EndpointInterface\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\nimport {LoggerService} from './logger.service';\n\n/**\n * Angular2+ FidjService\n * @see ModuleServiceInterface\n *\n * @exemple\n *      // ... after install :\n *      // $ npm install --save-dev fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.inject.js\"></script>\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.sync.js\"></script>\n *\n *\n */\n@Injectable()\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService();\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public login(login: string, password: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular2.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public getRoles(): Array<string> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjRoles();\n    };\n\n    public getEndpoints(): Array<EndpointInterface> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    public postOnEndpoint(key: string, data: any): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjPostOnEndpoint(key, data);\n    };\n\n    public getIdToken(): string {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public getMessage(): string {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public logout(force?: boolean): Promise<void | ErrorInterface> {\n        if (force || !this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout(force);\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FidjService} from './angular.service';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n\n    providers: [FidjService]\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n"]}