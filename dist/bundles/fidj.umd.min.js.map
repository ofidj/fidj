{"version":3,"sources":["ng://fidj/tools/base64.ts","ng://fidj/tools/storage.ts","ng://fidj/tools/xor.ts","ng://fidj/sdk/interfaces.ts","ng://fidj/version/index.ts","ng://fidj/connection/xhrpromise.ts","ng://fidj/connection/ajax.ts","ng://fidj/connection/client.ts","ng://fidj/sdk/error.ts","node_modules/tslib/tslib.es6.js","ng://fidj/connection/connection.ts","ng://fidj/session/session.ts","ng://fidj/sdk/internal.service.ts","ng://fidj/sdk/angular.service.ts","ng://fidj/sdk/fidj.module.ts"],"names":["Base64","encode","input","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","this","storage","window","localStorage","Error","prototype","set","key","value","checkKey","t","JSON","stringify","string","number","bool","TypeError","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","length","size","foreach","f","context","n","i","call","Xor","encrypt","result","header","keyCharAt","decrypt","oldStyle","substring","Math","floor","LOG","WARN","ERROR","NONE","XHRPromise","send","options","defaults","_this","method","data","headers","async","username","password","withCredentials","Object","assign","Promise","resolve","reject","e","ref","xhr","XMLHttpRequest","url","_xhr","onload","responseText","_detachWindowUnload","_getResponseText","_error","_handleError","_getResponseUrl","status","statusText","_getHeaders","onerror","ontimeout","onabort","_attachWindowUnload","open","DEFAULT_CONTENT_TYPE","hasOwnProperty","setRequestHeader","getXHR","_unloadHandler","_handleWindowUnload","bind","attachEvent","detachEvent","_parseHeaders","getAllResponseHeaders","getResponseHeader","responseURL","test","reason","code","abort","trim","str","isArray","arg","forEach","list","iterator","forEachArray","forEachString","forEachObject","array","len","charAt","object","k","row","index","indexOf","_this_1","toLowerCase","push","Ajax","post","args","opt","then","res","catch","err","put","delete","Client","appId","URI","sdk","uuid","_clientUuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","clientId","_clientId","refreshCount","_refreshCount","refreshCountInitial","setClientId","clientUuid","clientInfo","login","updateProperties","console","error","urlLogin","dataLogin","name","email","Content-Type","Accept","createdUser","_id","urlToken","dataToken","grant_type","client_id","client_secret","client_udid","client_info","audience","scope","reAuthenticate","refreshToken","refresh_token","refresh_extra","obj","logout","token","isReady","equals","msg","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","next","rejected","done","apply","__generator","body","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","v","op","pop","Connection","_sdk","_storage","_logger","client","user","cryptoSalt","_cryptoSalt","cryptoSaltNext","_cryptoSaltNext","accessToken","_accessToken","accessTokenPrevious","idToken","_idToken","_refreshToken","states","_states","apis","destroy","force","_accessTokenPrevious","setClient","_name","getIdPayload","setUser","getUser","getClient","setCryptoSalt","setCryptoSaltAsVerified","dataAsObj","fidjCrypto","decrypted","isLogin","exp","payload","decoded","Date","getTime","getClientId","getIdToken","getAccessPayload","getPreviousAccessPayload","refreshConnection","notExpired","log","expired","setConnection","clientUser","access_token","salt","id_token","roles","message","setConnectionOffline","getApiEndpoints","ea","blocked","filteredEa","prod","apiEndpoints","val","endpoint","filter","r","couldCheckStates","keys","state","bestOldOne","lastTimeWasOk","getDBs","dbs","sort","reverse","filteredDBs","verifyApiState","currentTime","endpointUrl","version","_a","isok","time","verifyDbState","dbEndpoint","verifyConnectionStates","promises","endpointObj","dbEndpointObj","all","FidjPouch","require","default","PouchAdapterCordovaSqlite","plugin","Session","db","dbRecordCount","dbLastSync","remoteDb","create","uid","opts","location","adapter","setRemote","sync","userId","remoteUri","replicate","to","on","doc","fidjUserId","second","first","oid","ave","crypto","dataWithoutIds","toStore","fidjOrgId","fidjAppVersion","_rev","fidjData","resultAsString","write","fidjDacr","response","ok","id","rev","data_id","_deleted","resultAsJson","extractJson","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","InternalService","logger","promise","org","LoggerService","tools.LocalStorage","session","session.Session","connection","connection.Connection","fidjInit","fidjId","self","logLevel","setLevel","fidjVersion","theBestUrl","theBestOldUrl","fidjIsLogin","connection.Client","fidjLogin","_removeAll","_createSession","_loginInternal","fidjLoginInDemoMode","now","setDate","getDate","tomorrow","tools.Base64","endpoints","jwtSign","fidjGetEndpoints","showBlocked","fidjRoles","fidjMessage","fidjLogout","fidjSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","warn","resolveEmpty","rejectEmptyNotUsed","ret","Function","doc_count","errMessage","fidjPutInDb","_generateObjectUniqueId","fidjRemoveInDb","fidjFindInDb","fidjFindAllInDb","results","fidjPostOnEndpoint","jwt","Authorization","fidjGetIdToken","loginUser","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","FidjService","fidjService","init","FidjError","loginAsDemo","isLoggedIn","getRoles","getEndpoints","postOnEndpoint","getMessage","find","findAll","Injectable","level","LoggerLevelEnum","FidjModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        return decodeURIComponent(atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","// export namespace fidj {\n// }\nexport interface ErrorInterface {\n    code: number;\n    reason: string;\n}\n\nexport interface EndpointInterface {\n    key: string;\n    url: string;\n    blocked: boolean;\n}\n\nexport interface EndpointFilterInterface {\n    key?: string;\n    showBlocked?: boolean;\n}\n\n/**\n * Interface used by all InternalService wrappers (angular.js, angular.io)\n *\n * @see FidjModule\n * @see FidjModule, FidjAngularService\n */\nexport interface ModuleServiceInterface {\n\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n\n    isLoggedIn(): boolean;\n\n    getRoles(): Array<string>;\n\n    getEndpoints(): Array<EndpointInterface>;\n\n    postOnEndpoint(key: string, data: any): Promise<any | ErrorInterface>;\n\n    getIdToken(): string;\n\n    getMessage(): string;\n\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n\n    sync(fnInitFirstData?: any): Promise<any | ErrorInterface>;\n\n    put(data: any): Promise<any | ErrorInterface>;\n\n    remove(dataId: any): Promise<any | ErrorInterface>;\n\n    find(id: string): Promise<any | ErrorInterface>;\n\n    findAll(): Promise<any | ErrorInterface>;\n}\n\n\nexport interface ModuleServiceInitOptionsInterface {\n    prod: boolean,\n    // forcedEndpoint?: string,\n    // forcedDBEndpoint?: string,\n    crypto?: boolean,\n    logLevel?: LoggerLevelEnum\n}\n\nexport interface ModuleServiceLoginOptionsInterface {\n    accessToken?: string,\n    idToken?: string,\n    refreshToken?: string,\n}\n\nexport interface SdkInterface {\n    org: string,\n    version: string,\n    prod: boolean\n}\n\nexport enum LoggerLevelEnum {\n    LOG = 1,\n    WARN = 2,\n    ERROR = 3,\n    NONE = 4\n}\n\nexport interface LoggerInterface {\n    setLevel: (LoggerLevelEnum) => void;\n\n    log: (a?, b?, c?, d?, e?, f?) => any;\n    warn: (a?, b?, c?, d?, e?, f?) => any;\n    error: (a?, b?, c?, d?, e?, f?) => any;\n}\n","// bumped version via gulp\nexport const version = '2.1.24';\n","export class XHRPromise {\n\n    public DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';\n    private _xhr;\n    private _unloadHandler: any;\n\n    constructor() {\n    };\n\n    /*\n     * XHRPromise.send(options) -> Promise\n     * - options (Object): URL, method, data, etc.\n     *\n     * Create the XHR object and wire up event handlers to use a promise.\n     */\n    send(options): Promise<any> {\n        let defaults;\n        if (options == null) {\n            options = {};\n        }\n        defaults = {\n            method: 'GET',\n            data: null,\n            headers: {},\n            async: true,\n            username: null,\n            password: null,\n            withCredentials: false\n        };\n        options = Object.assign({}, defaults, options);\n        return new Promise(( (_this: XHRPromise) => {\n            return  (resolve, reject) => {\n                let e, header, ref, value, xhr;\n                if (!XMLHttpRequest) {\n                    _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                    return;\n                }\n                if (typeof options.url !== 'string' || options.url.length === 0) {\n                    _this._handleError('url', reject, null, 'URL is a required parameter');\n                    return;\n                }\n                _this._xhr = xhr = new XMLHttpRequest;\n                xhr.onload =  ()  => {\n                    let responseText;\n                    _this._detachWindowUnload();\n                    try {\n                        responseText = _this._getResponseText();\n                    } catch (_error) {\n                        _this._handleError('parse', reject, null, 'invalid JSON response');\n                        return;\n                    }\n                    return resolve({\n                        url: _this._getResponseUrl(),\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: responseText,\n                        headers: _this._getHeaders(),\n                        xhr: xhr\n                    });\n                };\n                xhr.onerror =  () => {\n                    return _this._handleError('error', reject);\n                };\n                xhr.ontimeout =  () => {\n                    return _this._handleError('timeout', reject);\n                };\n                xhr.onabort =  () => {\n                    return _this._handleError('abort', reject);\n                };\n                _this._attachWindowUnload();\n                xhr.open(options.method, options.url, options.async, options.username, options.password);\n                if (options.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                if ((options.data != null) && !options.headers['Content-Type']) {\n                    options.headers['Content-Type'] = _this.DEFAULT_CONTENT_TYPE;\n                }\n                ref = options.headers;\n                for (header in ref) {\n                    if (ref.hasOwnProperty(header)) {\n                        value = ref[header];\n                        xhr.setRequestHeader(header, value);\n                    }\n                }\n                try {\n                    return xhr.send(options.data);\n                } catch (_error) {\n                    e = _error;\n                    return _this._handleError('send', reject, null, e.toString());\n                }\n            };\n        })(this));\n    };\n\n\n    /*\n     * XHRPromise.getXHR() -> XMLHttpRequest\n     */\n    getXHR() {\n        return this._xhr;\n    };\n\n\n    /*\n     * XHRPromise._attachWindowUnload()\n     *\n     * Fix for IE 9 and IE 10\n     * Internet Explorer freezes when you close a webpage during an XHR request\n     * https://support.microsoft.com/kb/2856746\n     *\n     */\n    private _attachWindowUnload() {\n        this._unloadHandler = this._handleWindowUnload.bind(this);\n        if ((window as any).attachEvent) {\n            return (window as any).attachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._detachWindowUnload()\n     */\n    private _detachWindowUnload() {\n        if ((window as any).detachEvent) {\n            return (window as any).detachEvent('onunload', this._unloadHandler);\n        }\n    };\n\n\n    /*\n     * XHRPromise._getHeaders() -> Object\n     */\n    private _getHeaders() {\n        return this._parseHeaders(this._xhr.getAllResponseHeaders());\n    };\n\n\n    /*\n     * XHRPromise._getResponseText() -> Mixed\n     *\n     * Parses response text JSON if present.\n     */\n    private _getResponseText() {\n        let responseText;\n        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';\n        switch ((this._xhr.getResponseHeader('Content-Type') || '').split(';')[0]) {\n            case 'application/json':\n            case 'text/javascript':\n                responseText = JSON.parse(responseText + '');\n        }\n        return responseText;\n    };\n\n\n    /*\n     * XHRPromise._getResponseUrl() -> String\n     *\n     * Actual response URL after following redirects.\n     */\n    private _getResponseUrl() {\n        if (this._xhr.responseURL != null) {\n            return this._xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {\n            return this._xhr.getResponseHeader('X-Request-URL');\n        }\n        return '';\n    };\n\n\n    /*\n     * XHRPromise._handleError(reason, reject, status, statusText)\n     * - reason (String)\n     * - reject (Function)\n     * - status (String)\n     * - statusText (String)\n     */\n    private _handleError(reason, reject, status?, statusText?) {\n        this._detachWindowUnload();\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n        // console.log('_handleError:', reason, this._xhr.status);\n        let code = 404;\n        if (reason === 'timeout') {\n            code = 408;\n        } else if (reason === 'abort') {\n            code = 408;\n        }\n\n        return reject({\n            reason: reason,\n            status: status || this._xhr.status || code,\n            code: status || this._xhr.status || code,\n            statusText: statusText || this._xhr.statusText,\n            xhr: this._xhr\n        });\n    };\n\n\n    /*\n     * XHRPromise._handleWindowUnload()\n     */\n    private _handleWindowUnload() {\n        return this._xhr.abort();\n    };\n\n\n    private trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n    }\n\n    private isArray(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\n\n    private forEach(list, iterator) {\n        if (toString.call(list) === '[object Array]') {\n            this.forEachArray(list, iterator, this)\n        } else if (typeof list === 'string') {\n            this.forEachString(list, iterator, this)\n        } else {\n            this.forEachObject(list, iterator, this)\n        }\n    }\n\n    private forEachArray(array, iterator, context) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (array.hasOwnProperty(i)) {\n                iterator.call(context, array[i], i, array)\n            }\n        }\n    }\n\n    private forEachString(string, iterator, context) {\n        for (let i = 0, len = string.length; i < len; i++) {\n            // no such thing as a sparse string.\n            iterator.call(context, string.charAt(i), i, string)\n        }\n    }\n\n    private forEachObject(object, iterator, context) {\n        for (const k in object) {\n            if (object.hasOwnProperty(k)) {\n                iterator.call(context, object[k], k, object)\n            }\n        }\n    }\n\n    private _parseHeaders(headers) {\n        if (!headers) {\n            return {};\n        }\n\n        const result = {};\n\n        this.forEach(\n            this.trim(headers).split('\\n')\n            , (row) => {\n                const index = row.indexOf(':')\n                    , key = this.trim(row.slice(0, index)).toLowerCase()\n                    , value = this.trim(row.slice(index + 1));\n\n                if (typeof(result[key]) === 'undefined') {\n                    result[key] = value\n                } else if (this.isArray(result[key])) {\n                    result[key].push(value)\n                } else {\n                    result[key] = [result[key], value]\n                }\n            }\n        );\n\n        return result;\n    }\n\n\n}\n","import {XHRPromise} from './xhrpromise';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr: XHRPromise;\n\n    constructor() {\n        this.xhr = new XHRPromise();\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n\n                // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                // _this._handleError('url', reject, null, 'URL is a required parameter');\n                // _this._handleError('parse', reject, null, 'invalid JSON response');\n                // return _this._handleError('error', reject);\n                // return _this._handleError('timeout', reject);\n                // return _this._handleError('abort', reject);\n                // return _this._handleError('send', reject, null, e.toString());\n\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    res.code = parseInt(res.status, 10);\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            })\n            .catch(err => {\n                // if (err.reason === 'timeout') {\n                //     err.code = 408;\n                // } else {\n                //     err.code = 404;\n                // }\n                return Promise.reject(err);\n            });\n    }\n}\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    // private refreshToken: string;\n    private static refreshCountInitial = 1;\n    private static refreshCount = Client.refreshCountInitial;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (window && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (window && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    public login(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        return new Ajax()\n            .post({\n                url: urlLogin,\n                data: dataLogin,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then(createdUser => {\n\n                this.setClientId(createdUser._id);\n                const urlToken = this.URI + '/oauth/token';\n                const dataToken = {\n                    grant_type: 'client_credentials',\n                    client_id: this.clientId,\n                    client_secret: password,\n                    client_udid: this.clientUuid,\n                    client_info: this.clientInfo,\n                    audience: this.appId,\n                    scope: JSON.stringify(this.sdk)\n                };\n                return new Ajax()\n                    .post({\n                        url: urlToken,\n                        data: dataToken,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    });\n            });\n    }\n\n    public reAuthenticate(refreshToken: string): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/oauth/token';\n        const data = {\n            grant_type: 'refresh_token',\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: refreshToken,\n            refresh_extra: Client.refreshCount,\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then((obj: any) => {\n                Client.refreshCount++;\n                this.storage.set(Client._refreshCount, Client.refreshCount);\n                return Promise.resolve(obj);\n            });\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = Client.refreshCountInitial;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/oauth/revoke';\n        const data = {\n            token: refreshToken,\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface, LoggerInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ConnectionFindOptionsInterface} from './interfaces';\nimport {Error} from '../sdk/error';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: any;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage,\n                private _logger: LoggerInterface) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    destroy(force?: boolean): void {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        if (!this.user) {\n            this.user = {};\n        }\n\n        // this._user._id = this._client.clientId;\n        this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: any): void {\n        this.user = user;\n        if (this.user._id) {\n            this.client.setClientId(this.user._id);\n\n            // store only clientId\n            delete this.user._id;\n        }\n    }\n\n    getUser(): any {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    getIdToken(): string {\n        return this.idToken;\n    }\n\n    getIdPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.getIdToken().split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    refreshConnection(): Promise<any | ErrorInterface> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const notExpired = (new Date().getTime() / 1000) < JSON.parse(decoded).exp;\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            this._logger.log('fidj.connection.connection.refreshConnection : token not expired ? ', notExpired);\n            if (notExpired) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const expired = (new Date().getTime() / 1000) >= JSON.parse(decoded).exp;\n            this._logger.log('fidj.connection.connection.refreshConnection : refreshToken not expired ? ', expired);\n            if (expired) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        this._logger.log('fidj.connection.connection.refreshConnection : refresh authentication.');\n        return new Promise((resolve, reject) => {\n            const client = this.getClient();\n\n            if (!client) {\n                return reject(new Error(400, 'Need an initialized client.'))\n            }\n\n            this.getClient().reAuthenticate(this.refreshToken)\n                .then(user => {\n                    this.setConnection(user);\n                    resolve(this.getUser());\n                })\n                .catch(err => {\n\n                    // if (err && err.code === 408) {\n                    //     code = 408; // no api uri or basic timeout : offline\n                    // } else if (err && err.code === 404) {\n                    //     code = 404; // page not found : offline\n                    // } else if (err && err.code === 410) {\n                    //     code = 403; // token expired or device not sure : need relogin\n                    // } else if (err) {\n                    //     code = 403; // forbidden : need relogin\n                    // }\n\n                    // resolve(code);\n                    reject(err);\n                });\n        });\n    };\n\n    setConnection(clientUser: any): void {\n\n        // only in private storage\n        if (clientUser.access_token) {\n            this.accessToken = clientUser.access_token;\n            this._storage.set(Connection._accessToken, this.accessToken);\n            delete clientUser.access_token;\n\n            const salt: string = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientUser.id_token) {\n            this.idToken = clientUser.id_token;\n            this._storage.set(Connection._idToken, this.idToken);\n            delete clientUser.id_token;\n        }\n        if (clientUser.refresh_token) {\n            this.refreshToken = clientUser.refresh_token;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n            delete clientUser.refresh_token;\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        // clientUser.roles = self.fidjRoles();\n        // clientUser.message = self.fidjMessage();\n        clientUser.roles = JSON.parse(this.getIdPayload({roles: []})).roles;\n        clientUser.message = JSON.parse(this.getIdPayload({message: ''})).message;\n        this.setUser(clientUser);\n    };\n\n    setConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser({\n            roles: JSON.parse(this.getIdPayload({roles: []})).roles,\n            message: JSON.parse(this.getIdPayload({message: ''})).message,\n            _id: 'demo'\n        });\n    }\n\n    getApiEndpoints(options?: ConnectionFindOptionsInterface): Array<EndpointInterface> {\n\n        // todo : let ea = ['https://fidj/api', 'https://fidj-proxy.herokuapp.com/api'];\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://fidj.ovh/api', blocked: false}];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:3201/api', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/api', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    getDBs(options?: ConnectionFindOptionsInterface): EndpointInterface[] {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    private async verifyApiState(currentTime: number, endpointUrl: string) {\n\n        try {\n\n            // console.log('verifyApiState: ', endpointUrl);\n            const data = await new Ajax()\n                .get({\n                    url: endpointUrl + '/status?isok=' + this._sdk.version,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            let state = false;\n            if (data && data.isok) {\n                state = true;\n            }\n            this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyApiState: state', endpointUrl, state);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[endpointUrl]) {\n                lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n            }\n            this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n        // console.log('verifyApiState: ', this.states);\n    }\n\n    private async verifyDbState(currentTime: number, dbEndpoint: string) {\n\n        try {\n            // console.log('verifyDbState: ', dbEndpoint);\n            const data = await new Ajax()\n                .get({\n                    url: dbEndpoint,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyDbState: state', dbEndpoint, true);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[dbEndpoint]) {\n                lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n            }\n            this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n    }\n\n    verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(this.verifyApiState(currentTime, endpointUrl));\n        });\n\n        const dbs = this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(this.verifyDbState(currentTime, dbEndpoint));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nconst FidjPouch = window['PouchDB'] ? window['PouchDB'] : require('pouchdb').default; // .default;\n\n// load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\nconst PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\nFidjPouch.plugin(PouchAdapterCordovaSqlite);\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n\n    public create(uid: string, force?: boolean): Promise<void | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve();\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n        uid = uid || 'default';\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err))\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public destroy(): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: {second: err}}))\n                            .on('error', (err) => reject({code: 401, reason:  {second: err}}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason:  {first: err}}))\n                    .on('error', (err) => reject({code: 401, reason:  {first: err}}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof (item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof (item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof (result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\nimport {LoggerService} from './angular.service';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false\n        };\n        if (promise) {\n            this.promise = promise;\n        }\n        if (logger) {\n            this.logger = logger;\n        } else {\n            this.logger = new LoggerService();\n        }\n        this.logger.log('fidj.sdk.service : constructor');\n        this.storage = new tools.LocalStorage(window.localStorage, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage, this.logger);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     */\n    public fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n\n        const self = this;\n        /*\n        if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        if (options && options.logLevel) {\n            self.logger.setLevel(options.logLevel);\n        }\n\n        self.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            self.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return self.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        self.sdk.prod = !options ? true : options.prod;\n        self.connection.fidjId = fidjId;\n        self.connection.fidjVersion = self.sdk.version;\n        self.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? true : options.crypto;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n\n                    let theBestUrl: any = self.connection.getApiEndpoints({filter: 'theBestOne'})[0];\n                    let theBestOldUrl: any = self.connection.getApiEndpoints({filter: 'theBestOldOne'})[0];\n                    const isLogin = self.fidjIsLogin();\n\n                    if (theBestUrl && theBestUrl.url) {\n                        theBestUrl = theBestUrl.url;\n                    }\n                    if (theBestOldUrl && theBestOldUrl.url) {\n                        theBestOldUrl = theBestOldUrl.url;\n                    }\n\n                    if (theBestUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestUrl, self.storage, self.sdk));\n                        resolve();\n                    } else if (isLogin && theBestOldUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestOldUrl, self.storage, self.sdk));\n                        resolve();\n                    } else {\n                        reject(new Error(404, 'Need one connection - or too old SDK version (check update)'));\n                    }\n\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjInit: ', err);\n                    reject(new Error(500, err.toString()));\n                });\n        });\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @returns\n     */\n    public fidjLogin(login: string, password: string): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjLogin');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(404, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self.connection.verifyConnectionStates();\n                })\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    return self._loginInternal(login, password);\n                })\n                .then((user) => {\n                    self.connection.setConnection(user);\n                    self.session.sync(self.connection.getClientId())\n                        .then(() => resolve(self.connection.getUser()))\n                        .catch((err) => resolve(self.connection.getUser()));\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLogin: ', err.toString());\n                    reject(err);\n                });\n        });\n    };\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: {},\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLoginInDemoMode error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjGetEndpoints(filter?: EndpointFilterInterface): Array<EndpointInterface> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        let endpoints = JSON.parse(this.connection.getAccessPayload({endpoints: []})).endpoints;\n        if (!endpoints) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public fidjRoles(): Array<string> {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public fidjMessage(): string {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public fidjLogout(force?: boolean): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient() && !force) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new self.promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    self.logger.log('fidj.sdk.service.fidjSync refreshConnection done : ', user);\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n                    self.logger.warn('fidj.sdk.service.fidjSync refreshConnection failed : ', err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again..'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during synchronisation: ' + err.toString();\n                        self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Find pb : need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, ' Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public fidjPostOnEndpoint(key: string, data?: any): Promise<any | ErrorInterface> {\n        const filter: EndpointFilterInterface = {\n            key: key\n        };\n        const endpoints = this.fidjGetEndpoints(filter);\n        if (!endpoints || endpoints.length !== 1) {\n            return this.promise.reject(\n                new Error(400,\n                    'fidj.sdk.service.fidjPostOnEndpoint : endpoint does not exist.'));\n        }\n\n        const endpointUrl = endpoints[0].url;\n        const jwt = this.connection.getIdToken();\n        return new Ajax()\n            .post({\n                url: endpointUrl,\n                // not used : withCredentials: true,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + jwt\n                },\n                data: data\n            });\n    };\n\n    public fidjGetIdToken(): string {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     */\n    private _loginInternal(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(403, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.logout()\n                    .then(() => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .catch((err) => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(loginUser => {\n                        loginUser.email = login;\n                        resolve(loginUser);\n                    })\n                    .catch(err => {\n                        self.logger.error('fidj.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n\n    protected _removeAll(): Promise<void | ErrorInterface> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n\n    private _createSession(uid: string): Promise<void | ErrorInterface> {\n        const dbs: EndpointInterface[] = this.connection.getDBs({filter: 'theBestOnes'});\n        if (!dbs || dbs.length === 0) {\n            this.logger.warn('Seems that you are in demo mode, no remote DB.');\n        }\n        this.session.setRemote(dbs);\n        return this.session.create(uid);\n    };\n\n    private _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {\n    LoggerInterface, ModuleServiceInterface, ModuleServiceInitOptionsInterface, ModuleServiceLoginOptionsInterface,\n    ErrorInterface, EndpointInterface, LoggerLevelEnum\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\n\n/**\n * Angular2+ FidjService\n * @see ModuleServiceInterface\n *\n * @exemple\n *      // ... after install :\n *      // $ npm install --save-dev fidj\n *      // then init your app.js & use it in your services\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.inject.js\"></script>\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.sync.js\"></script>\n *\n *\n */\n@Injectable()\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService();\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public login(login: string, password: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular2.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public getRoles(): Array<string> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjRoles();\n    };\n\n    public getEndpoints(): Array<EndpointInterface> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    public postOnEndpoint(key: string, data: any): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjPostOnEndpoint(key, data);\n    };\n\n    public getIdToken(): string {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public getMessage(): string {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public logout(force?: boolean): Promise<void | ErrorInterface> {\n        if (force || !this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout(force);\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n\nexport class LoggerService implements LoggerInterface {\n\n    constructor(private level?: LoggerLevelEnum) {\n        if (!level) {\n            this.level = LoggerLevelEnum.ERROR;\n        }\n\n        if (!window.console) {\n            this.level = LoggerLevelEnum.NONE;\n        }\n    }\n\n    log(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG) {\n            console.log(message, args);\n        }\n    }\n\n    warn(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN) {\n            console.warn(message, args);\n        }\n    }\n\n    error(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN || this.level === LoggerLevelEnum.ERROR) {\n            console.error(message, args);\n        }\n    }\n\n    setLevel(level: LoggerLevelEnum) {\n        this.level = level;\n    }\n}\n\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FidjService} from './angular.service';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n\n    providers: [FidjService]\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n"]}