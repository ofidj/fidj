{"version":3,"sources":["../../src/sdk/interfaces.ts","../../src/tools/base64.ts","../../src/tools/storage.ts","../../src/tools/xor.ts","../../src/sdk/error.ts","../../src/sdk/fidj.module.ts","../../node_modules/tslib/tslib.es6.js","../../src/version/index.ts","../../src/connection/ajax.ts","../../src/connection/interfaces.ts","../../src/connection/client.ts","../../src/connection/connection.ts","../../src/session/session.ts","../../src/sdk/logger.service.ts","../../src/sdk/internal.service.ts","../../src/sdk/angular.service.ts"],"names":["LoggerLevelEnum","Base64","encode","input","window","btoa","require","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","_atob","atob","decodeURIComponent","split","map","c","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","this","version","storage","localStorage","Error","prototype","set","key","value","checkKey","t","JSON","stringify","string","number","bool","TypeError","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","length","size","foreach","f","context","n","i","call","Xor","encrypt","result","header","keyCharAt","decrypt","oldStyle","substring","Math","floor","code","reason","equals","err","msg","NgModule","args","imports","CommonModule","declarations","exports","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","apply","__generator","body","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","pop","push","Object","create","XhrErrorReason","ClientTokens","username","accessToken","idToken","refreshToken","ClientUser","id","roles","message","Ajax","xhr","formatResponseData","response","dataParsed","data","formatError","error","errorFormatted","UNKNOWN","status","STATUS","TIMEOUT","request","post","opt","method","url","headers","res","catch","put","timeout","delete","Client","appId","URI","sdk","uuid","_clientUuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","clientId","_clientId","refreshCount","_refreshCount","refreshCountInitial","setClientId","clientUuid","clientInfo","login","password","updateProperties","urlLogin","dataLogin","name","email","Content-Type","Accept","console","_a","user","urlToken","dataToken","grant_type","client_udid","client_info","scope","Authorization","tools.Base64","createdAccessToken","token","createdIdToken","createdRefreshToken","reAuthenticate","_this","obj","logout","isReady","FidjPouch","Connection","_sdk","_storage","_logger","client","cryptoSalt","_cryptoSalt","cryptoSaltNext","_cryptoSaltNext","_accessToken","accessTokenPrevious","_idToken","_refreshToken","states","_states","apis","destroy","force","_accessTokenPrevious","setClient","setUser","getUser","getClient","setCryptoSalt","setCryptoSaltAsVerified","dataAsObj","fidjCrypto","decrypted","isLogin","exp","payload","decoded","Date","getTime","getClientId","getIdToken","getIdPayload","log","getAccessPayload","getPreviousAccessPayload","refreshConnection","notExpired","expired","clientTokens","setConnection","salt","clientUser","setConnectionOffline","options","getApiEndpoints","ea","blocked","filteredEa","prod","apiEndpoints","val","forEach","endpoint","filter","r","couldCheckStates","keys","state","bestOldOne","lastTimeWasOk","getDBs","dbs","sort","reverse","filteredDBs","verifyApiState","currentTime","endpointUrl","isOk","time","err_1","verifyDbState","dbEndpoint","verifyConnectionStates","promises","endpointObj","dbEndpointObj","all","default","PouchAdapterCordovaSqlite","plugin","Session","db","dbRecordCount","dbLastSync","remoteDb","uid","opts","location","adapter","setRemote","sync","userId","remoteUri","replicate","to","on","doc","fidjUserId","second","first","_id","oid","ave","crypto","dataWithoutIds","toStore","fidjOrgId","fidjAppVersion","_rev","fidjData","resultAsString","write","fidjDacr","ok","rev","data_id","_deleted","row","resultAsJson","extractJson","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","LoggerService","level","ERROR","NONE","INFO","warn","WARN","setLevel","urljoin","InternalService","logger","promise","ls","org","useDB","logLevel","global","tools.LocalStorage","session","session.Session","connection","connection.Connection","fidjInit","fidjId","self","fidjVersion","hasOwnProperty","theBestUrl","theBestOldUrl","fidjIsLogin","connection.Client","fidjLogin","_removeAll","_createSession","_loginInternal","e_1","fidjLoginInDemoMode","now","setDate","getDate","tomorrow","endpoints","jwtSign","fidjGetEndpoints","showBlocked","ap","Array","isArray","fidjRoles","fidjMessage","fidjLogout","fidjSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","resolveEmpty","rejectEmptyNotUsed","ret","Function","doc_count","errMessage","fidjPutInDb","indexOf","_generateObjectUniqueId","fidjRemoveInDb","fidjFindInDb","fidjFindAllInDb","results","fidjSendOnEndpoint","relativePath","answer","jwt","query","fidjGetIdToken","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","charAt","FidjService","fidjService","init","FidjError","loginAsDemo","isLoggedIn","getRoles","getEndpoints","sendOnEndpoint","getMessage","find","findAll","Injectable","providedIn"],"mappings":"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","sourcesContent":["// export namespace fidj {\n// }\nexport interface ErrorInterface {\n    code: number;\n    reason: string;\n}\n\nexport interface EndpointInterface {\n    key: string;\n    url: string;\n    blocked: boolean;\n}\n\nexport interface EndpointFilterInterface {\n    key?: string;\n    showBlocked?: boolean;\n}\n\n/**\n * Interface used by all InternalService wrappers (angular.js, angular.io)\n *\n * @see FidjModule\n * @see FidjModule, FidjAngularService\n */\nexport interface ModuleServiceInterface {\n\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n\n    isLoggedIn(): boolean;\n\n    getRoles(): Array<string>;\n\n    getEndpoints(): Array<EndpointInterface>;\n\n    sendOnEndpoint(key: string, verb: string, relativePath?: string, data?: any): Promise<any | ErrorInterface>;\n\n    getIdToken(): string;\n\n    getMessage(): string;\n\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n\n    sync(fnInitFirstData?: any): Promise<any | ErrorInterface>;\n\n    put(data: any): Promise<any | ErrorInterface>;\n\n    remove(dataId: any): Promise<any | ErrorInterface>;\n\n    find(id: string): Promise<any | ErrorInterface>;\n\n    findAll(): Promise<any | ErrorInterface>;\n}\n\n/**\n * prod : true by default\n * useDB : false by default\n * crypto : false by default\n * logLevel : NONE by default\n */\nexport interface ModuleServiceInitOptionsInterface {\n    prod: boolean,\n    useDB?: boolean,\n    // forcedEndpoint?: string,\n    // forcedDBEndpoint?: string,\n    crypto?: boolean,\n    logLevel?: LoggerLevelEnum\n}\n\nexport interface ModuleServiceLoginOptionsInterface {\n    accessToken?: string,\n    idToken?: string,\n    refreshToken?: string,\n}\n\nexport interface SdkInterface {\n    org: string,\n    version: string,\n    prod: boolean,\n    useDB: boolean\n}\n\nexport enum LoggerLevelEnum {\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3,\n    NONE = 4\n}\n\nexport interface LoggerInterface {\n    setLevel: (LoggerLevelEnum) => void;\n\n    log: (a?, b?, c?, d?, e?, f?) => any;\n    warn: (a?, b?, c?, d?, e?, f?) => any;\n    error: (a?, b?, c?, d?, e?, f?) => any;\n}\n","export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        const _btoa = typeof window !== 'undefined' ? window.btoa : require('btoa');\n\n        return _btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        const _atob = typeof window !== 'undefined' ? window.atob : require('atob');\n\n        return decodeURIComponent(_atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","// bumped version via gulp\nexport const version = '3.3.0';\n","// import {XHRPromise} from './xhrpromise';\n// const superagent = require('superagent');\n// import from 'superagent';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport enum XhrErrorReason {\n    UNKNOWN,\n    TIMEOUT,\n    STATUS\n}\n\n\nexport interface XhrErrorInterface {\n    reason: XhrErrorReason,\n    status: number,\n    code: number,\n    message: string,\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr; // : XHRPromise;\n\n    constructor() {\n\n        // https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html\n        // axios ?\n        //  https://github.com/axios/axios\n        // const axios = require('axios');\n\n        // axios.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY')\n        //     .then(response => {\n        //         console.log(response.data.url);\n        //         console.log(response.data.explanation);\n        //     })\n\n        // superagent.get('https://api.nasa.gov/planetary/apod')\n        //     .query({ api_key: 'DEMO_KEY', date: '2017-08-02' })\n\n        this.xhr = require('axios'); // require('superagent'); // new XHRPromise();\n    };\n\n    private static formatResponseData(response: any): any {\n        // TODO switch depending on json headers\n        let dataParsed = response;\n\n        while (dataParsed && dataParsed.data) {\n            dataParsed = dataParsed.data;\n        }\n\n        try {\n            dataParsed = JSON.parse(dataParsed + '');\n        } catch (e) {\n        }\n        return dataParsed;\n    };\n\n    private static formatError(error: any): XhrErrorInterface {\n\n        const errorFormatted: XhrErrorInterface = {\n            reason: XhrErrorReason.UNKNOWN,\n            status: -1,\n            code: -1,\n            message: '',\n        };\n\n        if (error.status) {\n            errorFormatted.reason = XhrErrorReason.STATUS;\n            errorFormatted.status = parseInt(error.status, 10);\n            errorFormatted.code = parseInt(error.status, 10);\n        }\n\n        if (error.response) {\n            errorFormatted.message = error.response;\n\n            if (error.response.status) {\n                errorFormatted.reason = XhrErrorReason.STATUS;\n                errorFormatted.status = parseInt(error.response.status, 10);\n                errorFormatted.code = parseInt(error.response.status, 10);\n            } else if (error.response.status === null) { // timeout\n                errorFormatted.reason = XhrErrorReason.TIMEOUT;\n                errorFormatted.status = 408;\n                errorFormatted.code = 408;\n            }\n\n        } else if (error.request) {\n            errorFormatted.message = error.request;\n        } else if (error.message) {\n            errorFormatted.message = error.message;\n        }\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n\n        // if (err.reason === 'timeout') {\n        //     err.code = 408;\n        // } else {\n        //     err.code = 404;\n        // }\n\n        return errorFormatted;\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr.post(opt.url, opt.data, {\n                headers: opt.headers,\n                // timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .put(opt.url, opt.data, {\n                headers: opt.headers,\n                timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .delete(opt.url, // no data\n                {\n                    headers: opt.headers,\n                    timeout: 10000\n                })\n            // .delete(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .get(opt.url, {\n                // opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            // .get(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n}\n","export interface ConnectionFindOptionsInterface {\n    filter: string,\n}\n\nexport class ClientToken {\n    constructor(\n        public id: string,\n        public type: string,\n        public data: string) {\n    }\n}\n\nexport class ClientTokens {\n    constructor(\n        public username: string,\n        public accessToken: ClientToken,\n        public idToken: ClientToken,\n        public refreshToken: ClientToken) {\n    }\n}\n\nexport class ClientUser {\n    constructor(public id: string,\n                public username: string,\n                public roles: string[],\n                message: string) {\n    }\n}\n\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\nimport * as tools from '../tools';\nimport {ClientToken, ClientTokens, ClientUser} from './interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    // private refreshToken: string;\n    private static refreshCountInitial = 1;\n    private static refreshCount = Client.refreshCountInitial;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (typeof window !== 'undefined' && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (typeof window !== 'undefined' && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    public async login(login: string, password: string, updateProperties?: any): Promise<ClientTokens | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        const createdUser: ClientUser = (await new Ajax().post({\n            url: urlLogin,\n            data: dataLogin,\n            headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n        }) as any).user;\n\n        this.setClientId(login); // login or createdUser.id or createdUser._id\n        const urlToken = this.URI + '/apps/' + this.appId + '/tokens';\n        const dataToken = {\n            grant_type: 'access_token',\n            // grant_type: 'client_credentials',\n            // client_id: this.clientId,\n            // client_secret: password,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            // audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n        const createdAccessToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Basic ' + tools.Base64.encode('' + login + ':' + password)\n            }\n        }) as any).token;\n\n        dataToken.grant_type = 'id_token';\n        const createdIdToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Bearer ' + createdAccessToken.data\n            }\n        }) as any).token;\n\n        dataToken.grant_type = 'refresh_token';\n        const createdRefreshToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Bearer ' + createdAccessToken.data\n            }\n        }) as any).token;\n\n        return new ClientTokens(login, createdAccessToken, createdIdToken, createdRefreshToken);\n    }\n\n    public reAuthenticate(refreshToken: string): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/me/tokens';\n        const data = {\n            grant_type: 'refresh_token',\n            // client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            // audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            // refresh_token: refreshToken,\n            refreshCount: Client.refreshCount,\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json', 'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + refreshToken\n                }\n            })\n            .then((obj: ClientToken) => {\n                Client.refreshCount++;\n                this.storage.set(Client._refreshCount, Client.refreshCount);\n                return Promise.resolve(obj);\n            });\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = Client.refreshCountInitial;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/me/tokens';\n        const data = {\n            token: refreshToken,\n            // client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            // audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        return new Ajax()\n            .delete({\n                url: url,\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json', 'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + refreshToken\n                }\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface, LoggerInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ClientTokens, ClientUser, ConnectionFindOptionsInterface} from './interfaces';\nimport {Error} from '../sdk/error';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: ClientUser;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage,\n                private _logger: LoggerInterface) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    destroy(force?: boolean): void {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        //if (!this.user) {\n        //    this.user = new ClientUser();\n        //}\n\n        // this._user._id = this._client.clientId;\n        //this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: ClientUser): void {\n        this.user = user;\n        if (this.client && this.user.id) {\n            this.client.setClientId(this.user.id);\n\n            // store only clientId\n            // delete this.user._id;\n        }\n    }\n\n    getUser(): ClientUser {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    getIdToken(): string {\n        return this.idToken;\n    }\n\n    getIdPayload(def?: any): string {\n\n        const idToken = this.getIdToken();\n\n        try {\n            let payload;\n            if (idToken) {\n                payload = idToken.split('.')[1];\n            }\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n            this._logger.log('fidj.connection.getIdPayload pb: ', def, e);\n        }\n\n        if (def) {\n            if (typeof def !== 'string') {\n                def = JSON.stringify(def);\n            }\n            return def;\n        }\n\n        return null;\n    }\n\n    getAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    refreshConnection(): Promise<ClientUser | ErrorInterface> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const notExpired = (new Date().getTime() / 1000) < JSON.parse(decoded).exp;\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            this._logger.log('fidj.connection.connection.refreshConnection : token not expired ? ', notExpired);\n            if (notExpired) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const expired = (new Date().getTime() / 1000) >= JSON.parse(decoded).exp;\n            this._logger.log('fidj.connection.connection.refreshConnection : refreshToken not expired ? ', expired);\n            if (expired) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        this._logger.log('fidj.connection.connection.refreshConnection : refresh authentication.');\n        return new Promise((resolve, reject) => {\n            const client = this.getClient();\n\n            if (!client) {\n                return reject(new Error(400, 'Need an initialized client.'))\n            }\n\n            this.getClient().reAuthenticate(this.refreshToken)\n                .then((clientTokens: ClientTokens) => {\n                    this.setConnection(clientTokens);\n                    resolve(this.getUser());\n                })\n                .catch(err => {\n\n                    // if (err && err.code === 408) {\n                    //     code = 408; // no api uri or basic timeout : offline\n                    // } else if (err && err.code === 404) {\n                    //     code = 404; // page not found : offline\n                    // } else if (err && err.code === 410) {\n                    //     code = 403; // token expired or device not sure : need relogin\n                    // } else if (err) {\n                    //     code = 403; // forbidden : need relogin\n                    // }\n\n                    // resolve(code);\n                    reject(err);\n                });\n        });\n    };\n\n    setConnection(clientTokens: ClientTokens): void {\n\n        // only in private storage\n        if (clientTokens.accessToken) {\n            this.accessToken = clientTokens.accessToken.data;\n            this._storage.set(Connection._accessToken, this.accessToken);\n\n            const salt: string = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientTokens.idToken) {\n            this.idToken = clientTokens.idToken.data;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (clientTokens.refreshToken) {\n            this.refreshToken = clientTokens.refreshToken.data;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        const clientUser = new ClientUser(\n            clientTokens.username, clientTokens.username,\n            JSON.parse(this.getIdPayload({roles: []})).roles,\n            JSON.parse(this.getIdPayload({message: ''})).message);\n        this.setUser(clientUser);\n    };\n\n    setConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser(new ClientUser('demo', 'demo' ,\n            JSON.parse(this.getIdPayload({roles: []})).roles,\n            JSON.parse(this.getIdPayload({message: ''})).message));\n    }\n\n    getApiEndpoints(options?: ConnectionFindOptionsInterface): Array<EndpointInterface> {\n\n        // todo : let ea = ['https://fidj/v3', 'https://fidj-proxy.herokuapp.com/v3'];\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://api.fidj.ovh/v3', blocked: false}];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:3201/v3', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/v3', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        this._logger.log('fidj.sdk.connection.getApiEndpoints : ', ea);\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    getDBs(options?: ConnectionFindOptionsInterface): EndpointInterface[] {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    private async verifyApiState(currentTime: number, endpointUrl: string) {\n\n        try {\n\n            this._logger.log('fidj.sdk.connection.verifyApiState : ', currentTime, endpointUrl);\n\n            const data = await new Ajax()\n                .get({\n                    url: endpointUrl + '/status?isOk=' + this._sdk.version,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            let state = false;\n            if (data && data.isOk) {\n                state = true;\n            }\n            this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > states : ', this.states);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[endpointUrl]) {\n                lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n            }\n            this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > catch pb  - states : ', err, this.states);\n        }\n    }\n\n    private async verifyDbState(currentTime: number, dbEndpoint: string) {\n\n        try {\n            // console.log('verifyDbState: ', dbEndpoint);\n            const data = await new Ajax()\n                .get({\n                    url: dbEndpoint,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyDbState: state', dbEndpoint, true);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[dbEndpoint]) {\n                lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n            }\n            this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n    }\n\n    verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(this.verifyApiState(currentTime, endpointUrl));\n        });\n\n        const dbs = this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(this.verifyDbState(currentTime, dbEndpoint));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nlet FidjPouch;\n\nif (typeof window !== 'undefined') {\n    FidjPouch = (window['PouchDB']) ? window['PouchDB'] : require('pouchdb').default; // .default;\n    // load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\n    const PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\n    FidjPouch.plugin(PouchAdapterCordovaSqlite);\n}\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n    public create(uid: string, force?: boolean): Promise<any | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve(this.db);\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n        uid = uid || 'default';\n\n        if (typeof window === 'undefined') {\n            return Promise.resolve(this.db);\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err));\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public destroy(): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: {second: err}}))\n                            .on('error', (err) => reject({code: 401, reason: {second: err}}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason: {first: err}}))\n                    .on('error', (err) => reject({code: 401, reason: {first: err}}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof (item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof (item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof (result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","import {\n    LoggerInterface, LoggerLevelEnum\n} from './interfaces';\n\nexport class LoggerService implements LoggerInterface {\n\n    constructor(private level?: LoggerLevelEnum) {\n        if (!level) {\n            this.level = LoggerLevelEnum.ERROR;\n        }\n\n        if (typeof console === 'undefined') {\n            this.level = LoggerLevelEnum.NONE;\n        }\n    }\n\n    log(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO) {\n            console.log(message, args);\n        }\n    }\n\n    warn(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO || this.level === LoggerLevelEnum.WARN) {\n            console.warn(message, args);\n        }\n    }\n\n    error(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO || this.level === LoggerLevelEnum.WARN || this.level === LoggerLevelEnum.ERROR) {\n            console.error(message, args);\n        }\n    }\n\n    setLevel(level: LoggerLevelEnum) {\n        this.level = level;\n    }\n}\n\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface, LoggerLevelEnum\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\nimport {LoggerService} from './logger.service';\nimport {ClientTokens, ClientUser} from '../connection';\n\nconst urljoin = require('url-join');\n// import {LocalStorage} from 'node-localstorage';\n// import 'localstorage-polyfill/localStorage';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor, options?: ModuleServiceInitOptionsInterface) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false,\n            useDB: true\n        };\n        if (promise) {\n            this.promise = promise;\n        }\n        if (logger) {\n            this.logger = logger;\n        } else {\n            this.logger = new LoggerService();\n        }\n        if (options && options.logLevel) {\n            this.logger.setLevel(options.logLevel);\n        }\n\n        this.logger.log('fidj.sdk.service : constructor');\n        let ls;\n        if (typeof window !== 'undefined') {\n            ls = window.localStorage;\n        } else if (typeof global !== 'undefined') {\n            require('localstorage-polyfill');\n            ls = global['localStorage'];\n        }\n        this.storage = new tools.LocalStorage(ls, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage, this.logger);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     */\n    public fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n\n        const self = this;\n        /*\n        if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        if (options && options.logLevel) {\n            self.logger.setLevel(options.logLevel);\n        } else {\n            self.logger.setLevel(LoggerLevelEnum.NONE);\n        }\n\n        self.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            self.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return self.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        self.sdk.prod = !options ? true : options.prod;\n        self.sdk.useDB = !options ? false : options.useDB;\n        self.connection.fidjId = fidjId;\n        self.connection.fidjVersion = self.sdk.version;\n        self.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? false : options.crypto;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n\n                    let theBestUrl: any = self.connection.getApiEndpoints({filter: 'theBestOne'})[0];\n                    let theBestOldUrl: any = self.connection.getApiEndpoints({filter: 'theBestOldOne'})[0];\n                    const isLogin = self.fidjIsLogin();\n                    self.logger.log('fidj.sdk.service.fidjInit > verifyConnectionStates : ', theBestUrl, theBestOldUrl, isLogin);\n\n                    if (theBestUrl && theBestUrl.url) {\n                        theBestUrl = theBestUrl.url;\n                    }\n                    if (theBestOldUrl && theBestOldUrl.url) {\n                        theBestOldUrl = theBestOldUrl.url;\n                    }\n\n                    if (theBestUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestUrl, self.storage, self.sdk));\n                        resolve();\n                    } else if (isLogin && theBestOldUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestOldUrl, self.storage, self.sdk));\n                        resolve();\n                    } else {\n                        reject(new Error(404, 'Need one connection - or too old SDK version (check update)'));\n                    }\n\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjInit: ', err);\n                    reject(new Error(500, err.toString()));\n                });\n        });\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @returns\n     */\n    public async fidjLogin(login: string, password: string): Promise<ClientUser | ErrorInterface> {\n        this.logger.log('fidj.sdk.service.fidjLogin');\n        if (!this.connection.isReady()) {\n            throw new Error(404, 'Need an intialized FidjService');\n        }\n\n        try {\n            await this._removeAll();\n            await this.connection.verifyConnectionStates();\n            await this._createSession(this.connection.fidjId);\n            await this._loginInternal(login, password);\n        } catch (err) {\n            throw new Error(500, err.toString());\n        }\n\n        if (!this.sdk.useDB) {\n            return this.connection.getUser();\n        }\n\n        try {\n            await this.session.sync(this.connection.getClientId());\n        } catch (e) {\n            this.logger.warn('fidj.sdk.service.fidjLogin: sync -not blocking- issue  ', e.toString());\n        }\n        return this.connection.getUser();\n    }\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: [],\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLoginInDemoMode error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjGetEndpoints(filter?: EndpointFilterInterface): Array<EndpointInterface> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        const ap = this.connection.getAccessPayload({endpoints: []});\n        let endpoints = JSON.parse(ap).endpoints;\n        if (!endpoints || !Array.isArray(endpoints)) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public fidjRoles(): Array<string> {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public fidjMessage(): string {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public fidjLogout(force?: boolean): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient() && !force) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjSync: you ar not using DB - no sync available.');\n            return Promise.resolve();\n        }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new self.promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    self.logger.log('fidj.sdk.service.fidjSync refreshConnection done : ', user);\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n                    self.logger.warn('fidj.sdk.service.fidjSync refreshConnection failed : ', err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again..'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during synchronisation: ' + err.toString();\n                        self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjPutInDb: you are not using DB - no put available.');\n            return Promise.resolve('NA');\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjRemoveInDb: you are not using DB - no remove available.');\n            return Promise.resolve();\n        }\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindInDb: you are not using DB - no find available.');\n            return Promise.resolve();\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Find pb : need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, ' Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindAllInDb: you are not using DB - no find available.');\n            return Promise.resolve([]);\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public fidjSendOnEndpoint(key: string, verb: string, relativePath: string, data: any): Promise<any | ErrorInterface> {\n        const filter: EndpointFilterInterface = {\n            key: key\n        };\n        const endpoints = this.fidjGetEndpoints(filter);\n        if (!endpoints || endpoints.length !== 1) {\n            return this.promise.reject(\n                new Error(400,\n                    'fidj.sdk.service.fidjSendOnEndpoint : endpoint does not exist.'));\n        }\n\n        let endpointUrl = endpoints[0].url;\n        if (relativePath) {\n            endpointUrl = urljoin(endpointUrl, relativePath);\n        }\n        const jwt = this.connection.getIdToken();\n        let answer;\n        const query = new Ajax();\n        switch (verb) {\n            case 'POST' :\n                answer = query.post({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: data\n                });\n                break;\n            case 'PUT' :\n                answer = query.put({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: data\n                });\n                break;\n            case 'DELETE' :\n                answer = query.delete({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n                break;\n            default:\n                answer = query.get({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n        }\n        return answer;\n    };\n\n    public fidjGetIdToken(): string {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     */\n    private _loginInternal(login: string, password: string, updateProperties?: any): Promise<ClientTokens | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(403, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.logout()\n                    .then(() => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .catch((err) => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(clientTokens => {\n                        resolve(clientTokens);\n                    })\n                    .catch(err => {\n                        self.logger.error('fidj.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n\n    protected _removeAll(): Promise<void | ErrorInterface> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n\n    private _createSession(uid: string): Promise<void | ErrorInterface> {\n        const dbs: EndpointInterface[] = this.connection.getDBs({filter: 'theBestOnes'});\n        if (!dbs || dbs.length === 0) {\n            this.logger.warn('Seems that you are in Demo mode or using Node (no remote DB).');\n        }\n        this.session.setRemote(dbs);\n        return this.session.create(uid);\n    };\n\n    private _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","/* tslint:disable:max-line-length */\nimport {Injectable} from '@angular/core';\nimport {\n    EndpointInterface,\n    ErrorInterface,\n    LoggerInterface,\n    LoggerLevelEnum,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceInterface,\n    ModuleServiceLoginOptionsInterface\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\nimport {LoggerService} from './logger.service';\n\n/**\n * Angular FidjService\n * @see ModuleServiceInterface\n *\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService(LoggerLevelEnum.ERROR);\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public login(login: string, password: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public getRoles(): Array<string> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjRoles();\n    };\n\n    public getEndpoints(): Array<EndpointInterface> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    public sendOnEndpoint(key: string, verb: string, relativePath?: string, data?: any): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjSendOnEndpoint(key, verb, relativePath, data);\n    };\n\n    public getIdToken(): string {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public getMessage(): string {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public logout(force?: boolean): Promise<void | ErrorInterface> {\n        if (force || !this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout(force);\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n"]}