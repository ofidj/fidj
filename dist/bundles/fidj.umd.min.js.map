{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://fidj/sdk/interfaces.ts","ng://fidj/tools/base64.ts","ng://fidj/tools/storage.ts","ng://fidj/tools/xor.ts","ng://fidj/version/index.ts","ng://fidj/connection/ajax.ts","ng://fidj/session/session.ts","ng://fidj/connection/client.ts","ng://fidj/sdk/error.ts","ng://fidj/connection/connection.ts","ng://fidj/sdk/logger.service.ts","ng://fidj/sdk/internal.service.ts","ng://fidj/sdk/angular.service.ts","ng://fidj/sdk/fidj.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","push","LoggerLevelEnum","Base64","encode","input","require","_btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","_atob","decodeURIComponent","split","map","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","version","storage","window","localStorage","Error","prototype","set","checkKey","JSON","stringify","string","number","bool","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","size","foreach","context","Xor","encrypt","header","keyCharAt","decrypt","oldStyle","substring","Math","floor","XhrErrorReason","FidjPouch","Ajax","xhr","formatResponseData","response","dataParsed","data","formatError","error","errorFormatted","reason","UNKNOWN","status","code","message","STATUS","TIMEOUT","request","post","args","opt","method","url","headers","timeout","res","catch","err","put","delete","Client","appId","URI","sdk","uuid","_clientUuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","clientId","_clientId","refreshCount","_refreshCount","refreshCountInitial","setClientId","clientUuid","clientInfo","login","password","updateProperties","_this","console","urlLogin","dataLogin","name","username","email","Content-Type","Accept","createdUser","_id","urlToken","dataToken","grant_type","client_id","client_secret","client_udid","client_info","audience","scope","reAuthenticate","refreshToken","refresh_token","refresh_extra","obj","logout","token","isReady","Error$1","equals","msg","Connection","_sdk","_storage","_logger","client","user","cryptoSalt","_cryptoSalt","cryptoSaltNext","_cryptoSaltNext","accessToken","_accessToken","accessTokenPrevious","idToken","_idToken","_refreshToken","states","_states","apis","destroy","force","_accessTokenPrevious","setClient","_name","getIdPayload","setUser","getUser","getClient","setCryptoSalt","setCryptoSaltAsVerified","dataAsObj","fidjCrypto","decrypted","isLogin","exp","payload","decoded","Date","getTime","getClientId","getIdToken","log","getAccessPayload","getPreviousAccessPayload","refreshConnection","notExpired","expired","setConnection","clientUser","access_token","salt","id_token","roles","setConnectionOffline","options","getApiEndpoints","ea","blocked","filteredEa","prod","apiEndpoints","val","forEach","endpoint","filter","couldCheckStates","keys","state","bestOldOne","lastTimeWasOk","getDBs","dbs","sort","reverse","filteredDBs","verifyApiState","currentTime","endpointUrl","_a","isok","time","err_1","verifyDbState","dbEndpoint","verifyConnectionStates","promises","endpointObj","dbEndpointObj","all","default","PouchAdapterCordovaSqlite","plugin","Session","db","dbRecordCount","dbLastSync","remoteDb","create","uid","opts","location","adapter","setRemote","sync","userId","remoteUri","replicate","to","on","doc","fidjUserId","second","first","oid","ave","crypto","dataWithoutIds","toStore","fidjOrgId","fidjAppVersion","_rev","fidjData","resultAsString","write","fidjDacr","ok","id","rev","data_id","_deleted","row","resultAsJson","extractJson","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","LoggerService","level","ERROR","NONE","LOG","warn","WARN","setLevel","InternalService","logger","promise","ls","org","version.version","useDB","logLevel","global","tools.LocalStorage","session","session.Session","connection","connection.Connection","fidjInit","fidjId","self","fidjVersion","hasOwnProperty","theBestUrl","theBestOldUrl","fidjIsLogin","connection.Client","fidjLogin","_removeAll","_createSession","_loginInternal","fidjLoginInDemoMode","now","setDate","getDate","tomorrow","tools.Base64","endpoints","jwtSign","fidjGetEndpoints","showBlocked","ap","Array","isArray","fidjRoles","fidjMessage","fidjLogout","fidjSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","resolveEmpty","rejectEmptyNotUsed","ret","Function","doc_count","errMessage","fidjPutInDb","indexOf","_generateObjectUniqueId","fidjRemoveInDb","fidjFindInDb","fidjFindAllInDb","results","fidjSendOnEndpoint","relativePath","answer","jwt","query","Authorization","fidjGetIdToken","loginUser","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","charAt","FidjService","fidjService","init","FidjError","loginAsDemo","isLoggedIn","getRoles","getEndpoints","sendOnEndpoint","getMessage","find","findAll","Injectable","FidjModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// export namespace fidj {\n// }\nexport interface ErrorInterface {\n    code: number;\n    reason: string;\n}\n\nexport interface EndpointInterface {\n    key: string;\n    url: string;\n    blocked: boolean;\n}\n\nexport interface EndpointFilterInterface {\n    key?: string;\n    showBlocked?: boolean;\n}\n\n/**\n * Interface used by all InternalService wrappers (angular.js, angular.io)\n *\n * @see FidjModule\n * @see FidjModule, FidjAngularService\n */\nexport interface ModuleServiceInterface {\n\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n\n    isLoggedIn(): boolean;\n\n    getRoles(): Array<string>;\n\n    getEndpoints(): Array<EndpointInterface>;\n\n    sendOnEndpoint(key: string, verb: string, relativePath: string, data?: any): Promise<any | ErrorInterface>;\n\n    getIdToken(): string;\n\n    getMessage(): string;\n\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n\n    sync(fnInitFirstData?: any): Promise<any | ErrorInterface>;\n\n    put(data: any): Promise<any | ErrorInterface>;\n\n    remove(dataId: any): Promise<any | ErrorInterface>;\n\n    find(id: string): Promise<any | ErrorInterface>;\n\n    findAll(): Promise<any | ErrorInterface>;\n}\n\n\nexport interface ModuleServiceInitOptionsInterface {\n    prod: boolean,\n    useDB?: boolean,\n    // forcedEndpoint?: string,\n    // forcedDBEndpoint?: string,\n    crypto?: boolean,\n    logLevel?: LoggerLevelEnum\n}\n\nexport interface ModuleServiceLoginOptionsInterface {\n    accessToken?: string,\n    idToken?: string,\n    refreshToken?: string,\n}\n\nexport interface SdkInterface {\n    org: string,\n    version: string,\n    prod: boolean,\n    useDB: boolean\n}\n\nexport enum LoggerLevelEnum {\n    LOG = 1,\n    WARN = 2,\n    ERROR = 3,\n    NONE = 4\n}\n\nexport interface LoggerInterface {\n    setLevel: (LoggerLevelEnum) => void;\n\n    log: (a?, b?, c?, d?, e?, f?) => any;\n    warn: (a?, b?, c?, d?, e?, f?) => any;\n    error: (a?, b?, c?, d?, e?, f?) => any;\n}\n","export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        const _btoa = require('btoa');\n\n        return _btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        const _atob = require('atob');\n\n        return decodeURIComponent(_atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","// bumped version via gulp\nexport const version = '2.1.31';\n","// import {XHRPromise} from './xhrpromise';\n// const superagent = require('superagent');\n// import from 'superagent';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport enum XhrErrorReason {\n    UNKNOWN,\n    TIMEOUT,\n    STATUS\n}\n\n\nexport interface XhrErrorInterface {\n    reason: XhrErrorReason,\n    status: number,\n    code: number,\n    message: string,\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr; // : XHRPromise;\n\n    constructor() {\n\n        // https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html\n        // axios ?\n        //  https://github.com/axios/axios\n        // const axios = require('axios');\n\n        // axios.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY')\n        //     .then(response => {\n        //         console.log(response.data.url);\n        //         console.log(response.data.explanation);\n        //     })\n\n        // superagent.get('https://api.nasa.gov/planetary/apod')\n        //     .query({ api_key: 'DEMO_KEY', date: '2017-08-02' })\n\n        this.xhr = require('axios'); // require('superagent'); // new XHRPromise();\n    };\n\n    private static formatResponseData(response: any): any {\n        // TODO switch depending on json headers\n        let dataParsed = response;\n\n        while (dataParsed && dataParsed.data) {\n            dataParsed = dataParsed.data;\n        }\n\n        try {\n            dataParsed = JSON.parse(dataParsed + '');\n        } catch (e) {\n        }\n        return dataParsed;\n    };\n\n    private static formatError(error: any): XhrErrorInterface {\n\n        const errorFormatted: XhrErrorInterface = {\n            reason: XhrErrorReason.UNKNOWN,\n            status: -1,\n            code: -1,\n            message: '',\n        };\n\n        if (error.status) {\n            errorFormatted.reason = XhrErrorReason.STATUS;\n            errorFormatted.status = parseInt(error.status, 10);\n            errorFormatted.code = parseInt(error.status, 10);\n        }\n\n        if (error.response) {\n            errorFormatted.message = error.response;\n\n            if (error.response.status) {\n                errorFormatted.reason = XhrErrorReason.STATUS;\n                errorFormatted.status = parseInt(error.response.status, 10);\n                errorFormatted.code = parseInt(error.response.status, 10);\n            } else if (error.response.status === null) { // timeout\n                errorFormatted.reason = XhrErrorReason.TIMEOUT;\n                errorFormatted.status = 408;\n                errorFormatted.code = 408;\n            }\n\n        } else if (error.request) {\n            errorFormatted.message = error.request;\n        } else if (error.message) {\n            errorFormatted.message = error.message;\n        }\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n\n        // if (err.reason === 'timeout') {\n        //     err.code = 408;\n        // } else {\n        //     err.code = 404;\n        // }\n\n        return errorFormatted;\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr\n            .post(opt.url, {\n                data: opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .put(opt.url, {\n                data: opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .delete(opt.url, {\n                data: opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            // .delete(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .get(opt.url, {\n                data: opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            // .get(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nlet FidjPouch;\n\nif (typeof window !== 'undefined') {\n    FidjPouch = (window['PouchDB']) ? window['PouchDB'] : require('pouchdb').default; // .default;\n    // load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\n    const PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\n    FidjPouch.plugin(PouchAdapterCordovaSqlite);\n}\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n    public create(uid: string, force?: boolean): Promise<any | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve(this.db);\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n        uid = uid || 'default';\n\n        if (typeof window === 'undefined') {\n            return Promise.resolve(this.db);\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err));\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public destroy(): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: {second: err}}))\n                            .on('error', (err) => reject({code: 401, reason: {second: err}}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason: {first: err}}))\n                    .on('error', (err) => reject({code: 401, reason: {first: err}}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof (item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof (item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof (result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    // private refreshToken: string;\n    private static refreshCountInitial = 1;\n    private static refreshCount = Client.refreshCountInitial;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (typeof window !== 'undefined' && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (typeof window !== 'undefined' && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    public login(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        return new Ajax()\n            .post({\n                url: urlLogin,\n                data: dataLogin,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then(createdUser => {\n\n                this.setClientId(createdUser._id);\n                const urlToken = this.URI + '/oauth/token';\n                const dataToken = {\n                    grant_type: 'client_credentials',\n                    client_id: this.clientId,\n                    client_secret: password,\n                    client_udid: this.clientUuid,\n                    client_info: this.clientInfo,\n                    audience: this.appId,\n                    scope: JSON.stringify(this.sdk)\n                };\n                return new Ajax()\n                    .post({\n                        url: urlToken,\n                        data: dataToken,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                    });\n            });\n    }\n\n    public reAuthenticate(refreshToken: string): Promise<any | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/oauth/token';\n        const data = {\n            grant_type: 'refresh_token',\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: refreshToken,\n            refresh_extra: Client.refreshCount,\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            })\n            .then((obj: any) => {\n                Client.refreshCount++;\n                this.storage.set(Client._refreshCount, Client.refreshCount);\n                return Promise.resolve(obj);\n            });\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = Client.refreshCountInitial;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/oauth/revoke';\n        const data = {\n            token: refreshToken,\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface, LoggerInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ConnectionFindOptionsInterface} from './interfaces';\nimport {Error} from '../sdk/error';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: any;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage,\n                private _logger: LoggerInterface) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    destroy(force?: boolean): void {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        if (!this.user) {\n            this.user = {};\n        }\n\n        // this._user._id = this._client.clientId;\n        this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: any): void {\n        this.user = user;\n        if (this.client && this.user._id) {\n            this.client.setClientId(this.user._id);\n\n            // store only clientId\n            delete this.user._id;\n        }\n    }\n\n    getUser(): any {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    getIdToken(): string {\n        return this.idToken;\n    }\n\n    getIdPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.getIdToken().split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n            this._logger.log('fidj.connection.getIdPayload pb: ', def, e);\n        }\n        return def ? def : null;\n    }\n\n    getAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    refreshConnection(): Promise<any | ErrorInterface> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const notExpired = (new Date().getTime() / 1000) < JSON.parse(decoded).exp;\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            this._logger.log('fidj.connection.connection.refreshConnection : token not expired ? ', notExpired);\n            if (notExpired) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const expired = (new Date().getTime() / 1000) >= JSON.parse(decoded).exp;\n            this._logger.log('fidj.connection.connection.refreshConnection : refreshToken not expired ? ', expired);\n            if (expired) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        this._logger.log('fidj.connection.connection.refreshConnection : refresh authentication.');\n        return new Promise((resolve, reject) => {\n            const client = this.getClient();\n\n            if (!client) {\n                return reject(new Error(400, 'Need an initialized client.'))\n            }\n\n            this.getClient().reAuthenticate(this.refreshToken)\n                .then(user => {\n                    this.setConnection(user);\n                    resolve(this.getUser());\n                })\n                .catch(err => {\n\n                    // if (err && err.code === 408) {\n                    //     code = 408; // no api uri or basic timeout : offline\n                    // } else if (err && err.code === 404) {\n                    //     code = 404; // page not found : offline\n                    // } else if (err && err.code === 410) {\n                    //     code = 403; // token expired or device not sure : need relogin\n                    // } else if (err) {\n                    //     code = 403; // forbidden : need relogin\n                    // }\n\n                    // resolve(code);\n                    reject(err);\n                });\n        });\n    };\n\n    setConnection(clientUser: any): void {\n\n        // only in private storage\n        if (clientUser.access_token) {\n            this.accessToken = clientUser.access_token;\n            this._storage.set(Connection._accessToken, this.accessToken);\n            delete clientUser.access_token;\n\n            const salt: string = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientUser.id_token) {\n            this.idToken = clientUser.id_token;\n            this._storage.set(Connection._idToken, this.idToken);\n            delete clientUser.id_token;\n        }\n        if (clientUser.refresh_token) {\n            this.refreshToken = clientUser.refresh_token;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n            delete clientUser.refresh_token;\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        // clientUser.roles = self.fidjRoles();\n        // clientUser.message = self.fidjMessage();\n        clientUser.roles = JSON.parse(this.getIdPayload({roles: []})).roles;\n        clientUser.message = JSON.parse(this.getIdPayload({message: ''})).message;\n        this.setUser(clientUser);\n    };\n\n    setConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser({\n            roles: JSON.parse(this.getIdPayload({roles: []})).roles,\n            message: JSON.parse(this.getIdPayload({message: ''})).message,\n            _id: 'demo'\n        });\n    }\n\n    getApiEndpoints(options?: ConnectionFindOptionsInterface): Array<EndpointInterface> {\n\n        // todo : let ea = ['https://fidj/api', 'https://fidj-proxy.herokuapp.com/api'];\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://fidj.ovh/api', blocked: false}];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:3201/api', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/api', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        this._logger.log('fidj.sdk.connection.getApiEndpoints : ', ea);\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    getDBs(options?: ConnectionFindOptionsInterface): EndpointInterface[] {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    private async verifyApiState(currentTime: number, endpointUrl: string) {\n\n        try {\n\n            this._logger.log('fidj.sdk.connection.verifyApiState : ', currentTime, endpointUrl);\n\n            const data = await new Ajax()\n                .get({\n                    url: endpointUrl + '/status?isok=' + this._sdk.version,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            let state = false;\n            if (data && data.isok) {\n                state = true;\n            }\n            this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > states : ', this.states);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[endpointUrl]) {\n                lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n            }\n            this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > catch pb  - states : ', err, this.states);\n        }\n    }\n\n    private async verifyDbState(currentTime: number, dbEndpoint: string) {\n\n        try {\n            // console.log('verifyDbState: ', dbEndpoint);\n            const data = await new Ajax()\n                .get({\n                    url: dbEndpoint,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyDbState: state', dbEndpoint, true);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[dbEndpoint]) {\n                lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n            }\n            this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n    }\n\n    verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(this.verifyApiState(currentTime, endpointUrl));\n        });\n\n        const dbs = this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(this.verifyDbState(currentTime, dbEndpoint));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","import {\n    LoggerInterface, LoggerLevelEnum\n} from './interfaces';\n\nexport class LoggerService implements LoggerInterface {\n\n    constructor(private level?: LoggerLevelEnum) {\n        if (!level) {\n            this.level = LoggerLevelEnum.ERROR;\n        }\n\n        if (typeof console === 'undefined') {\n            this.level = LoggerLevelEnum.NONE;\n        }\n    }\n\n    log(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG) {\n            console.log(message, args);\n        }\n    }\n\n    warn(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN) {\n            console.warn(message, args);\n        }\n    }\n\n    error(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.LOG || this.level === LoggerLevelEnum.WARN || this.level === LoggerLevelEnum.ERROR) {\n            console.error(message, args);\n        }\n    }\n\n    setLevel(level: LoggerLevelEnum) {\n        this.level = level;\n    }\n}\n\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\nimport {LoggerService} from './logger.service';\n// import {LocalStorage} from 'node-localstorage';\n// import 'localstorage-polyfill/localStorage';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor, options?: ModuleServiceInitOptionsInterface) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false,\n            useDB: true\n        };\n        if (promise) {\n            this.promise = promise;\n        }\n        if (logger) {\n            this.logger = logger;\n        } else {\n            this.logger = new LoggerService();\n        }\n        if (options && options.logLevel) {\n            this.logger.setLevel(options.logLevel);\n        }\n\n        this.logger.log('fidj.sdk.service : constructor');\n        let ls;\n        if (typeof window !== 'undefined') {\n            ls = window.localStorage;\n        } else if (typeof global !== 'undefined') {\n            require('localstorage-polyfill');\n            ls = global['localStorage'];\n        }\n        this.storage = new tools.LocalStorage(ls, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage, this.logger);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     */\n    public fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n\n        const self = this;\n        /*\n        if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        if (options && options.logLevel) {\n            self.logger.setLevel(options.logLevel);\n        }\n\n        self.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            self.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return self.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        self.sdk.prod = !options ? true : options.prod;\n        self.sdk.useDB = !options ? true : options.useDB;\n        self.connection.fidjId = fidjId;\n        self.connection.fidjVersion = self.sdk.version;\n        self.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? true : options.crypto;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n\n                    let theBestUrl: any = self.connection.getApiEndpoints({filter: 'theBestOne'})[0];\n                    let theBestOldUrl: any = self.connection.getApiEndpoints({filter: 'theBestOldOne'})[0];\n                    const isLogin = self.fidjIsLogin();\n                    self.logger.log('fidj.sdk.service.fidjInit > verifyConnectionStates : ', theBestUrl, theBestOldUrl, isLogin);\n\n                    if (theBestUrl && theBestUrl.url) {\n                        theBestUrl = theBestUrl.url;\n                    }\n                    if (theBestOldUrl && theBestOldUrl.url) {\n                        theBestOldUrl = theBestOldUrl.url;\n                    }\n\n                    if (theBestUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestUrl, self.storage, self.sdk));\n                        resolve();\n                    } else if (isLogin && theBestOldUrl) {\n                        self.connection.setClient(new connection.Client(self.connection.fidjId, theBestOldUrl, self.storage, self.sdk));\n                        resolve();\n                    } else {\n                        reject(new Error(404, 'Need one connection - or too old SDK version (check update)'));\n                    }\n\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjInit: ', err);\n                    reject(new Error(500, err.toString()));\n                });\n        });\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @returns\n     */\n    public fidjLogin(login: string, password: string): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjLogin');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(404, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self.connection.verifyConnectionStates();\n                })\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    return self._loginInternal(login, password);\n                })\n                .then((user) => {\n                    self.connection.setConnection(user);\n\n                    if (!self.sdk.useDB) {\n                        resolve(self.connection.getUser());\n                    } else {\n                        self.session.sync(self.connection.getClientId())\n                            .then(() => resolve(self.connection.getUser()))\n                            .catch((err) => resolve(self.connection.getUser()));\n                    }\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLogin: ', err.toString());\n                    reject(err);\n                });\n        });\n    };\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: [],\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(() => {\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLoginInDemoMode error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjGetEndpoints(filter?: EndpointFilterInterface): Array<EndpointInterface> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        const ap = this.connection.getAccessPayload({endpoints: []});\n        let endpoints = JSON.parse(ap).endpoints;\n        if (!endpoints || !Array.isArray(endpoints)) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public fidjRoles(): Array<string> {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public fidjMessage(): string {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public fidjLogout(force?: boolean): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient() && !force) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjSync: you ar not using DB - no sync available.');\n            return Promise.resolve();\n        }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new self.promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    self.logger.log('fidj.sdk.service.fidjSync refreshConnection done : ', user);\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n                    self.logger.warn('fidj.sdk.service.fidjSync refreshConnection failed : ', err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again..'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during synchronisation: ' + err.toString();\n                        self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjPutInDb: you are not using DB - no put available.');\n            return Promise.resolve('NA');\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjRemoveInDb: you are not using DB - no remove available.');\n            return Promise.resolve();\n        }\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindInDb: you are not using DB - no find available.');\n            return Promise.resolve();\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Find pb : need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, ' Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindAllInDb: you are not using DB - no find available.');\n            return Promise.resolve([]);\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public fidjSendOnEndpoint(key: string, verb: string, relativePath: string, data: any): Promise<any | ErrorInterface> {\n        const filter: EndpointFilterInterface = {\n            key: key\n        };\n        const endpoints = this.fidjGetEndpoints(filter);\n        if (!endpoints || endpoints.length !== 1) {\n            return this.promise.reject(\n                new Error(400,\n                    'fidj.sdk.service.fidjSendOnEndpoint : endpoint does not exist.'));\n        }\n\n        const endpointUrl = endpoints[0].url + relativePath;\n        const jwt = this.connection.getIdToken();\n        let answer;\n        const query = new Ajax();\n        switch (verb) {\n            case 'POST' :\n                answer = query.post({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: data\n                });\n                break;\n            case 'PUT' :\n                answer = query.put({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: data\n                });\n                break;\n            case 'DELETE' :\n                answer = query.delete({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n                break;\n            default:\n                answer = query.get({\n                    url: endpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n        }\n        return answer;\n    };\n\n    public fidjGetIdToken(): string {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     */\n    private _loginInternal(login: string, password: string, updateProperties?: any): Promise<any | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject(new Error(403, 'Need an intialized FidjService'));\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.logout()\n                    .then(() => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .catch((err) => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(loginUser => {\n                        loginUser.email = login;\n                        resolve(loginUser);\n                    })\n                    .catch(err => {\n                        self.logger.error('fidj.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n\n    protected _removeAll(): Promise<void | ErrorInterface> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n\n    private _createSession(uid: string): Promise<void | ErrorInterface> {\n        const dbs: EndpointInterface[] = this.connection.getDBs({filter: 'theBestOnes'});\n        if (!dbs || dbs.length === 0) {\n            this.logger.warn('Seems that you are in Demo mode or using Node (no remote DB).');\n        }\n        this.session.setRemote(dbs);\n        return this.session.create(uid);\n    };\n\n    private _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","/* tslint:disable:max-line-length */\nimport {Injectable} from '@angular/core';\nimport {\n    EndpointInterface,\n    ErrorInterface,\n    LoggerInterface,\n    LoggerLevelEnum,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceInterface,\n    ModuleServiceLoginOptionsInterface\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\nimport {LoggerService} from './logger.service';\n\n/**\n * Angular2+ FidjService\n * @see ModuleServiceInterface\n *\n * @exemple\n *      // ... after install :\n *      // $ npm install --save-dev fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.inject.js\"></script>\n *\n * <script src=\"https://gist.githubusercontent.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46/raw/5fff69dd9c15f692a856db62cf334b724ef3f4ac/angular.fidj.sync.js\"></script>\n *\n *\n */\n@Injectable()\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService(LoggerLevelEnum.ERROR);\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public login(login: string, password: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular2.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public getRoles(): Array<string> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjRoles();\n    };\n\n    public getEndpoints(): Array<EndpointInterface> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    public sendOnEndpoint(key: string, verb: string, relativePath: string, data?: any): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjSendOnEndpoint(key, verb, relativePath, data);\n    };\n\n    public getIdToken(): string {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public getMessage(): string {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public logout(force?: boolean): Promise<void | ErrorInterface> {\n        if (force || !this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular2.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout(force);\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular2.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FidjService} from './angular.service';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n\n    providers: [FidjService]\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n"]}