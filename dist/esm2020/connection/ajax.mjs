// import {XHRPromise} from './xhrpromise';
// const superagent = require('superagent');
// import from 'superagent';
import axios from 'axios';
export var XhrErrorReason;
(function (XhrErrorReason) {
    XhrErrorReason[XhrErrorReason["UNKNOWN"] = 0] = "UNKNOWN";
    XhrErrorReason[XhrErrorReason["TIMEOUT"] = 1] = "TIMEOUT";
    XhrErrorReason[XhrErrorReason["STATUS"] = 2] = "STATUS";
})(XhrErrorReason || (XhrErrorReason = {}));
export class Ajax {
    constructor() {
        // https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html
        // axios ?
        //  https://github.com/axios/axios
        // const axios = require('axios');
        // axios.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY')
        //     .then(response => {
        //         console.log(response.data.url);
        //         console.log(response.data.explanation);
        //     })
        // superagent.get('https://api.nasa.gov/planetary/apod')
        //     .query({ api_key: 'DEMO_KEY', date: '2017-08-02' })
        this.xhr = axios; // require('superagent'); // new XHRPromise();
    }
    ;
    static formatResponseData(response) {
        // TODO switch depending on json headers
        let dataParsed = response;
        while (dataParsed && dataParsed.data) {
            dataParsed = dataParsed.data;
        }
        try {
            dataParsed = JSON.parse(dataParsed + '');
        }
        catch (e) {
        }
        return dataParsed;
    }
    ;
    static formatError(error) {
        const errorFormatted = {
            reason: XhrErrorReason.UNKNOWN,
            status: -1,
            code: -1,
            message: '',
        };
        if (error.status) {
            errorFormatted.reason = XhrErrorReason.STATUS;
            errorFormatted.status = parseInt(error.status, 10);
            errorFormatted.code = parseInt(error.status, 10);
        }
        if (error.response) {
            errorFormatted.message = error.response;
            if (error.response.status) {
                errorFormatted.reason = XhrErrorReason.STATUS;
                errorFormatted.status = parseInt(error.response.status, 10);
                errorFormatted.code = parseInt(error.response.status, 10);
            }
            else if (error.response.status === null) { // timeout
                errorFormatted.reason = XhrErrorReason.TIMEOUT;
                errorFormatted.status = 408;
                errorFormatted.code = 408;
            }
        }
        else if (error.request) {
            errorFormatted.message = error.request;
        }
        else if (error.message) {
            errorFormatted.message = error.message;
        }
        // _this._handleError('browser', reject, null, 'browser doesn\'t support XMLHttpRequest');
        // _this._handleError('url', reject, null, 'URL is a required parameter');
        // _this._handleError('parse', reject, null, 'invalid JSON response');
        // return _this._handleError('error', reject);
        // return _this._handleError('timeout', reject);
        // return _this._handleError('abort', reject);
        // return _this._handleError('send', reject, null, e.toString());
        // if (err.reason === 'timeout') {
        //     err.code = 408;
        // } else {
        //     err.code = 404;
        // }
        return errorFormatted;
    }
    ;
    post(args) {
        const opt = {
            method: 'POST',
            url: args.url,
            data: JSON.stringify(args.data)
        };
        if (args.headers) {
            opt.headers = args.headers;
        }
        return this.xhr.post(opt.url, opt.data, {
            headers: opt.headers,
            // timeout: 10000
        })
            .then(res => {
            if (res.status &&
                (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {
                return Promise.reject(Ajax.formatError(res));
            }
            return Promise.resolve(Ajax.formatResponseData(res));
        })
            .catch(err => {
            return Promise.reject(Ajax.formatError(err));
        });
    }
    put(args) {
        const opt = {
            method: 'PUT',
            url: args.url,
            data: JSON.stringify(args.data)
        };
        if (args.headers) {
            opt.headers = args.headers;
        }
        return this.xhr
            .put(opt.url, opt.data, {
            headers: opt.headers,
            timeout: 10000
        })
            .then(res => {
            if (res.status &&
                (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {
                return Promise.reject(Ajax.formatError(res));
            }
            return Promise.resolve(Ajax.formatResponseData(res));
        })
            .catch(err => {
            return Promise.reject(Ajax.formatError(err));
        });
    }
    delete(args) {
        const opt = {
            method: 'DELETE',
            url: args.url,
            data: JSON.stringify(args.data)
        };
        if (args.headers) {
            opt.headers = args.headers;
        }
        return this.xhr
            .delete(opt.url, // no data
        {
            headers: opt.headers,
            timeout: 10000
        })
            // .delete(opt.url) // .send(opt)
            .then(res => {
            if (res.status &&
                (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {
                return Promise.reject(Ajax.formatError(res));
            }
            return Promise.resolve(Ajax.formatResponseData(res));
        })
            .catch(err => {
            return Promise.reject(Ajax.formatError(err));
        });
    }
    get(args) {
        const opt = {
            method: 'GET',
            url: args.url
        };
        if (args.data) {
            opt.data = args.data;
        }
        if (args.headers) {
            opt.headers = args.headers;
        }
        return this.xhr
            .get(opt.url, {
            // opt.data,
            headers: opt.headers,
            timeout: 10000
        })
            // .get(opt.url) // .send(opt)
            .then(res => {
            if (res.status &&
                (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {
                return Promise.reject(Ajax.formatError(res));
            }
            return Promise.resolve(Ajax.formatResponseData(res));
        })
            .catch(err => {
            return Promise.reject(Ajax.formatError(err));
        });
    }
}
//# sourceMappingURL=data:application/json;base64,