{"version":3,"file":"fidj.mjs","sources":["../../src/tools/base64.ts","../../src/tools/storage.ts","../../src/tools/xor.ts","../../src/sdk/interfaces.ts","../../src/sdk/error.ts","../../src/sdk/fidj.module.ts","../../src/version/index.ts","../../src/connection/interfaces.ts","../../src/connection/ajax.ts","../../src/connection/client.ts","../../src/connection/connection.ts","../../src/session/session.ts","../../src/session/error.ts","../../src/sdk/logger.service.ts","../../src/sdk/internal.service.ts","../../src/sdk/angular.service.ts","../../src/fidj.ts"],"sourcesContent":["export class Base64 {\n\n    constructor() {\n    };\n\n    /**\n     * Decodes string from Base64 string\n     */\n    public static encode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        // TODO const _btoa = typeof window !== 'undefined' ? window.btoa : import('btoa');\n        const _btoa = window.btoa;\n\n        return _btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n\n    public static decode(input: string): string {\n\n        if (!input) {\n            return null;\n        }\n\n        // TODO const _atob = typeof window !== 'undefined' ? window.atob : import 'atob';\n        const _atob = window.atob;\n\n        return decodeURIComponent(_atob(input).split('').map((c) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","/**\n * localStorage class factory\n * Usage : var LocalStorage = fidj.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\n\n    public version = '0.1';\n    private readonly storage;\n\n    // Constructor\n    constructor(storageService, private storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('fidj.LocalStorageFactory needs a storageService!');\n        }\n        // todo LocalStorage refacto\n        //            if (!fidj.Xml) {\n        //                throw new Error('fidj.Xml needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json) {\n        //                throw new Error('fidj.Json needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Xml.isXml || !fidj.Xml.xml2String || !fidj.Xml.string2Xml) {\n        //                throw new Error('fidj.Xml with isXml(), xml2String()\n        // and string2Xml() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //            if (!fidj.Json.object2String || !fidj.Json.string2Object) {\n        //                throw new Error('fidj.Json with object2String()\n        // and string2Object() needs to be loaded before fidj.LocalStorage!');\n        //            }\n        //\n    }\n\n    // Public API\n\n    /**\n     * Sets a key's value.\n     *\n     * @param key - Key to set. If this value is not set or not\n     *              a string an exception is raised.\n     * @param value - Value to set. This can be any value that is JSON\n     *              compatible (Numbers, Strings, Objects etc.).\n     * @returns the stored value which is a container of user value.\n     */\n    set(key: string, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n\n    /**\n     * Looks up a key in cache\n     *\n     * @param key - Key to look up.\n     * @param def - Default value to return, if key didn't exist.\n     * @returns the key value, default value or <null>\n     */\n    get(key: string, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const value = JSON.parse(item);\n\n            // var value = fidj.Json.string2Object(item);\n            // if ('xml' in value) {\n            //     return fidj.Xml.string2Xml(value.xml);\n            // } else\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n\n    /**\n     * Deletes a key from cache.\n     *\n     * @param  key - Key to delete.\n     * @returns true if key existed or false if it didn't\n     */\n    remove(key: string) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n\n    /**\n     * Deletes everything in cache.\n     *\n     * @return true\n     */\n    clear() {\n        const existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n\n    /**\n     * How much space in bytes does the storage take?\n     *\n     * @returns Number\n     */\n    size() {\n        return this.storage.length;\n    };\n\n    /**\n     * Call function f on the specified context for each element of the storage\n     * from index 0 to index length-1.\n     * WARNING : You should not modify the storage during the loop !!!\n     *\n     * @param f - Function to call on every item.\n     * @param  context - Context (this for example).\n     * @returns Number of items in storage\n     */\n    foreach(f, context) {\n        const n = this.storage.length;\n        for (let i = 0; i < n; i++) {\n            const key = this.storage.key(i);\n            const value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n\n    // Private API\n    // helper functions and variables hidden within this function scope\n\n    private checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n","import {Base64} from './base64';\n\nexport class Xor {\n\n    static header = 'artemis-lotsum';\n\n    constructor() {\n    };\n\n\n    public static encrypt(value: string, key: string): string {\n\n        let result = '';\n\n        value = Xor.header + value;\n\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n        result = Base64.encode(result);\n        return result;\n    };\n\n    public static decrypt(value: string, key: string, oldStyle?: boolean): string {\n        let result = '';\n        value = Base64.decode(value);\n        for (let i = 0; i < value.length; i++) {\n            result += String.fromCharCode((value[i].charCodeAt(0).toString(10) as any) ^ Xor.keyCharAt(key, i));\n        }\n\n        if (!oldStyle && Xor.header !== result.substring(0, Xor.header.length)) {\n            return null;\n        }\n\n        if (!oldStyle) {\n            result = result.substring(Xor.header.length);\n        }\n        return result;\n    }\n\n    public static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","export interface ErrorInterface {\n    code: number;\n    reason: string;\n}\n\nexport interface EndpointInterface {\n    key: string;\n    url: string;\n    blocked: boolean;\n}\n\nexport interface EndpointFilterInterface {\n    key?: string;\n    showBlocked?: boolean;\n}\n\nexport interface EndpointCallInterface {\n    verb: string;\n    key?: string;\n    relativePath?: string;\n    data?: any;\n\n    // in case of key not found\n    defaultKeyUrl?: string;\n}\n\n/**\n * Interface used by all InternalService wrappers (angular.js, angular.io)\n *\n * @see FidjModule\n * @see FidjModule, FidjAngularService\n */\nexport interface ModuleServiceInterface {\n\n    init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface>;\n\n    login(login: string, password: string): Promise<any | ErrorInterface>;\n\n    loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface>;\n\n    isLoggedIn(): boolean;\n\n    getRoles(): Promise<Array<string>>;\n\n    getEndpoints(): Promise<Array<EndpointInterface>>;\n\n    sendOnEndpoint(input: EndpointCallInterface): Promise<any>;\n\n    forgotPasswordRequest(email: String): Promise<void>;\n\n    getIdToken(): Promise<string | ErrorInterface>;\n\n    getMessage(): Promise<string>;\n\n    logout(force?: boolean): Promise<void | ErrorInterface>;\n\n    sync(fnInitFirstData?: any): Promise<any | ErrorInterface>;\n\n    put(data: any): Promise<any | ErrorInterface>;\n\n    remove(dataId: any): Promise<any | ErrorInterface>;\n\n    find(id: string): Promise<any | ErrorInterface>;\n\n    findAll(): Promise<any | ErrorInterface>;\n}\n\n/**\n * prod : true by default\n * useDB : false by default\n * crypto : false by default\n * logLevel : NONE by default\n */\nexport interface ModuleServiceInitOptionsInterface {\n    prod: boolean,\n    useDB?: boolean,\n    crypto?: boolean,\n    logLevel?: LoggerLevelEnum\n}\n\nexport interface ModuleServiceLoginOptionsInterface {\n    accessToken?: string,\n    idToken?: string,\n    refreshToken?: string,\n}\n\nexport interface SdkInterface {\n    org: string,\n    version: string,\n    prod: boolean,\n    useDB: boolean\n}\n\nexport enum LoggerLevelEnum {\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3,\n    NONE = 4\n}\n\nexport interface LoggerInterface {\n    setLevel: (LoggerLevelEnum) => void;\n\n    log: (a?, b?, c?, d?, e?, f?) => any;\n    warn: (a?, b?, c?, d?, e?, f?) => any;\n    error: (a?, b?, c?, d?, e?, f?) => any;\n}\n","import {ErrorInterface} from './interfaces';\n\nexport class Error implements ErrorInterface {\n\n    constructor(public code: number, public reason: string) {\n    };\n\n    equals(err: Error) {\n        return this.code === err.code && this.reason === err.reason;\n    }\n\n    toString(): string {\n        const msg: string = (typeof this.reason === 'string') ? this.reason : JSON.stringify(this.reason);\n        return '' + this.code + ' - ' + msg;\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n\n/**\n * `NgModule` which provides associated services.\n *\n * ...\n *\n * @stable\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n})\nexport class FidjModule {\n    constructor() {\n    }\n}\n\n\n/**\n * module FidjModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install fidj\n *      // then init your app.js & use it in your services\n * TODO refresh gist :\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n","// bumped version via gulp\nexport const version = '3.3.7';\n","export interface ConnectionFindOptionsInterface {\n    filter: string,\n}\n\nexport class ClientToken {\n    constructor(\n        public id: string,\n        public type: string,\n        public data: string) {\n    }\n}\n\nexport class ClientTokens {\n    constructor(\n        public username: string,\n        public accessToken: ClientToken,\n        public idToken: ClientToken,\n        public refreshToken: ClientToken) {\n    }\n}\n\nexport class ClientUser {\n    constructor(public id: string,\n                public username: string,\n                public roles: string[],\n                message: string) {\n    }\n}\n\n","// import {XHRPromise} from './xhrpromise';\n// const superagent = require('superagent');\n// import from 'superagent';\nimport axios from 'axios';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\n\nexport enum XhrErrorReason {\n    UNKNOWN,\n    TIMEOUT,\n    STATUS\n}\n\n\nexport interface XhrErrorInterface {\n    reason: XhrErrorReason,\n    status: number,\n    code: number,\n    message: string,\n}\n\nexport class Ajax {\n\n    // private static xhr: XHRPromise = new XHRPromise();\n    private xhr; // : XHRPromise;\n\n    constructor() {\n\n        // https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html\n        // axios ?\n        //  https://github.com/axios/axios\n        // const axios = require('axios');\n\n        // axios.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY')\n        //     .then(response => {\n        //         console.log(response.data.url);\n        //         console.log(response.data.explanation);\n        //     })\n\n        // superagent.get('https://api.nasa.gov/planetary/apod')\n        //     .query({ api_key: 'DEMO_KEY', date: '2017-08-02' })\n\n        this.xhr = axios; // require('superagent'); // new XHRPromise();\n    };\n\n    private static formatResponseData(response: any): any {\n        // TODO switch depending on json headers\n        let dataParsed = response;\n\n        while (dataParsed && dataParsed.data) {\n            dataParsed = dataParsed.data;\n        }\n\n        try {\n            dataParsed = JSON.parse(dataParsed + '');\n        } catch (e) {\n        }\n        return dataParsed;\n    };\n\n    private static formatError(error: any): XhrErrorInterface {\n\n        const errorFormatted: XhrErrorInterface = {\n            reason: XhrErrorReason.UNKNOWN,\n            status: -1,\n            code: -1,\n            message: '',\n        };\n\n        if (error.status) {\n            errorFormatted.reason = XhrErrorReason.STATUS;\n            errorFormatted.status = parseInt(error.status, 10);\n            errorFormatted.code = parseInt(error.status, 10);\n        }\n\n        if (error.response) {\n            errorFormatted.message = error.response;\n\n            if (error.response.status) {\n                errorFormatted.reason = XhrErrorReason.STATUS;\n                errorFormatted.status = parseInt(error.response.status, 10);\n                errorFormatted.code = parseInt(error.response.status, 10);\n            } else if (error.response.status === null) { // timeout\n                errorFormatted.reason = XhrErrorReason.TIMEOUT;\n                errorFormatted.status = 408;\n                errorFormatted.code = 408;\n            }\n\n        } else if (error.request) {\n            errorFormatted.message = error.request;\n        } else if (error.message) {\n            errorFormatted.message = error.message;\n        }\n\n        // _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n        // _this._handleError('url', reject, null, 'URL is a required parameter');\n        // _this._handleError('parse', reject, null, 'invalid JSON response');\n        // return _this._handleError('error', reject);\n        // return _this._handleError('timeout', reject);\n        // return _this._handleError('abort', reject);\n        // return _this._handleError('send', reject, null, e.toString());\n\n        // if (err.reason === 'timeout') {\n        //     err.code = 408;\n        // } else {\n        //     err.code = 404;\n        // }\n\n        return errorFormatted;\n    };\n\n    public post(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n\n        const opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr.post(opt.url, opt.data, {\n                headers: opt.headers,\n                // timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public put(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .put(opt.url, opt.data, {\n                headers: opt.headers,\n                timeout: 10000\n            })\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public delete(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .delete(opt.url, // no data\n                {\n                    headers: opt.headers,\n                    timeout: 10000\n                })\n            // .delete(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n\n    public get(args: XhrOptionsInterface): Promise<any | XhrErrorInterface> {\n        const opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .get(opt.url, {\n                // opt.data,\n                headers: opt.headers,\n                timeout: 10000\n            })\n            // .get(opt.url) // .send(opt)\n            .then(res => {\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    return Promise.reject(Ajax.formatError(res));\n                }\n\n                return Promise.resolve(Ajax.formatResponseData(res));\n            })\n            .catch(err => {\n                return Promise.reject(Ajax.formatError(err));\n            });\n    }\n}\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools';\nimport {SdkInterface, ErrorInterface} from '../sdk/interfaces';\nimport * as tools from '../tools';\nimport {ClientToken, ClientTokens, ClientUser} from './interfaces';\n\nexport class Client {\n\n    public clientId: string;\n    private clientUuid: string;\n    private clientInfo: string;\n    // private refreshToken: string;\n    private static refreshCountInitial = 1;\n    private static refreshCount = Client.refreshCountInitial;\n    private static _clientUuid = 'v2.clientUuid';\n    private static _clientId = 'v2.clientId';\n    private static _refreshCount = 'v2.refreshCount';\n\n    constructor(private appId: string,\n                private URI: string,\n                private storage: LocalStorage,\n                private sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();\n        let info = '_clientInfo'; // this.storage.get(Client._clientInfo);\n        if (typeof window !== 'undefined' && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (typeof window !== 'undefined' && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.clientId = this.storage.get(Client._clientId);\n        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;\n    };\n\n    public setClientId(value: string) {\n        this.clientId = '' + value;\n        this.storage.set(Client._clientId, this.clientId);\n    }\n\n    public setClientUuid(value: string) {\n        this.clientUuid = '' + value;\n        this.storage.set(Client._clientUuid, this.clientUuid);\n    }\n\n    public setClientInfo(value: string) {\n        this.clientInfo = '' + value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n\n    /**\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     * @throws {ErrorInterface}\n     */\n    public async login(login: string, password: string, updateProperties?: any): Promise<ClientTokens> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const urlLogin = this.URI + '/users';\n\n        const dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        const createdUser: ClientUser = (await new Ajax().post({\n            url: urlLogin,\n            data: dataLogin,\n            headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n        }) as any).user;\n\n        this.setClientId(login); // login or createdUser.id or createdUser._id\n        const urlToken = this.URI + '/apps/' + this.appId + '/tokens';\n        const dataToken = {\n            grant_type: 'access_token',\n            // grant_type: 'client_credentials',\n            // client_id: this.clientId,\n            // client_secret: password,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            // audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n        const createdAccessToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Basic ' + tools.Base64.encode('' + login + ':' + password)\n            }\n        }) as any).token;\n\n        dataToken.grant_type = 'id_token';\n        const createdIdToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Bearer ' + createdAccessToken.data\n            }\n        }) as any).token;\n\n        dataToken.grant_type = 'refresh_token';\n        const createdRefreshToken: ClientToken = (await new Ajax().post({\n            url: urlToken,\n            data: dataToken,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Bearer ' + createdAccessToken.data\n            }\n        }) as any).token;\n\n        return new ClientTokens(login, createdAccessToken, createdIdToken, createdRefreshToken);\n    }\n\n    /**\n     *\n     * @param refreshToken\n     * @throws ErrorInterface\n     */\n    public async reAuthenticate(refreshToken: string): Promise<ClientToken> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        const url = this.URI + '/apps/' + this.appId + '/tokens';\n        const data = {\n            grant_type: 'refresh_token',\n            // client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            // audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: refreshToken,\n            refreshCount: Client.refreshCount,\n        };\n\n        const clientToken: ClientToken = await new Ajax().post({\n            url: url,\n            data: data,\n            headers: {\n                'Content-Type': 'application/json', 'Accept': 'application/json',\n                'Authorization': 'Bearer ' + refreshToken\n            }\n        })\n\n        Client.refreshCount++;\n        this.storage.set(Client._refreshCount, Client.refreshCount);\n\n        return clientToken;\n    }\n\n    public logout(refreshToken?: string): Promise<void | ErrorInterface> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, reason: 'no-api-uri'});\n        }\n\n        // delete this.clientUuid;\n        // delete this.clientId;\n        // this.storage.remove(Client._clientUuid);\n        this.storage.remove(Client._clientId);\n        this.storage.remove(Client._refreshCount);\n        Client.refreshCount = Client.refreshCountInitial;\n\n        if (!refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const url = this.URI + '/apps/' + this.appId + '/tokens';\n\n        return new Ajax()\n            .delete({\n                url: url,\n                headers: {\n                    'Content-Type': 'application/json', 'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + refreshToken\n                }\n            });\n    }\n\n    public isReady(): boolean {\n        return !!this.URI;\n    }\n}\n","import {Client} from './client';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface, ErrorInterface, EndpointInterface, LoggerInterface} from '../sdk/interfaces';\nimport {Base64, LocalStorage, Xor} from '../tools';\nimport {Ajax} from './ajax';\nimport {ClientToken, ClientTokens, ClientUser, ConnectionFindOptionsInterface} from './interfaces';\nimport {Error} from '../sdk/error';\n\nexport class Connection {\n\n    public fidjId: string;\n    public fidjVersion: string;\n    public fidjCrypto: boolean;\n    public accessToken: string;\n    public accessTokenPrevious: string;\n    public idToken: string;\n    public refreshToken: string;\n    public states: { [s: string]: { state: boolean, time: number, lastTimeWasOk: number }; }; // Map<string, boolean>;\n    public apis: Array<EndpointInterface>;\n\n    private cryptoSalt: string;\n    private cryptoSaltNext: string;\n    private client: Client;\n    private user: ClientUser;\n\n    private static _accessToken = 'v2.accessToken';\n    private static _accessTokenPrevious = 'v2.accessTokenPrevious';\n    private static _idToken = 'v2.idToken';\n    private static _refreshToken = 'v2.refreshToken';\n    private static _states = 'v2.states';\n    private static _cryptoSalt = 'v2.cryptoSalt';\n    private static _cryptoSaltNext = 'v2.cryptoSalt.next';\n\n    constructor(private _sdk: SdkInterface,\n                private _storage: LocalStorage,\n                private _logger: LoggerInterface) {\n        this.client = null;\n        this.user = null;\n        this.cryptoSalt = this._storage.get(Connection._cryptoSalt) || null;\n        this.cryptoSaltNext = this._storage.get(Connection._cryptoSaltNext) || null;\n        this.accessToken = this._storage.get(Connection._accessToken) || null;\n        this.accessTokenPrevious = this._storage.get('v2.accessTokenPrevious') || null;\n        this.idToken = this._storage.get(Connection._idToken) || null;\n        this.refreshToken = this._storage.get(Connection._refreshToken) || null;\n        this.states = this._storage.get(Connection._states) || {};\n        this.apis = [];\n    };\n\n    isReady(): boolean {\n        return !!this.client && this.client.isReady();\n    }\n\n    async destroy(force?: boolean) {\n\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this._storage.remove(Connection._refreshToken);\n        this._storage.remove(Connection._states);\n\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set(Connection._accessTokenPrevious, this.accessTokenPrevious);\n        }\n\n        if (force) {\n            this._storage.remove(Connection._cryptoSalt);\n            this._storage.remove(Connection._cryptoSaltNext);\n            this._storage.remove(Connection._accessTokenPrevious);\n        }\n\n        this.user = null;\n        if (this.client) {\n            // this.client.setClientId(null);\n            await this.client.logout();\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n\n    setClient(client: Client): void {\n\n        this.client = client;\n        //if (!this.user) {\n        //    this.user = new ClientUser();\n        //}\n\n        // this._user._id = this._client.clientId;\n        //this.user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n\n    setUser(user: ClientUser): void {\n        this.user = user;\n        if (this.client && this.user.id) {\n            this.client.setClientId(this.user.id);\n\n            // store only clientId\n            // delete this.user._id;\n        }\n    }\n\n    getUser(): ClientUser {\n        return this.user;\n    }\n\n    getClient(): Client {\n        return this.client;\n    }\n\n    setCryptoSalt(value: string) {\n        if (this.cryptoSalt !== value && this.cryptoSaltNext !== value) {\n            this.cryptoSaltNext = value;\n            this._storage.set(Connection._cryptoSaltNext, this.cryptoSaltNext);\n        }\n\n        if (!this.cryptoSalt) {\n            this.setCryptoSaltAsVerified();\n        }\n    }\n\n    setCryptoSaltAsVerified() {\n        if (this.cryptoSaltNext) {\n            this.cryptoSalt = this.cryptoSaltNext;\n            this._storage.set(Connection._cryptoSalt, this.cryptoSalt);\n        }\n        this.cryptoSaltNext = null;\n        this._storage.remove(Connection._cryptoSaltNext);\n    }\n\n    encrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        } else {\n            const dataAsObj = {string: data};\n            data = JSON.stringify(dataAsObj);\n        }\n\n        if (this.fidjCrypto && this.cryptoSalt) {\n            const key = this.cryptoSalt;\n            return Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n\n    decrypt(data: string): any {\n        let decrypted = null;\n\n        try {\n            if (this.fidjCrypto && this.cryptoSaltNext) {\n                const key = this.cryptoSaltNext;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n                // if (decrypted) {\n                //    this.setCryptoSaltAsVerified();\n                // }\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n        try {\n            if (!decrypted && this.fidjCrypto && this.cryptoSalt) {\n                const key = this.cryptoSalt;\n                decrypted = Xor.decrypt(data, key, true);\n                decrypted = JSON.parse(decrypted);\n            }\n        } catch (err) {\n            decrypted = null;\n        }\n\n\n        try {\n\n            if (!decrypted) {\n                decrypted = JSON.parse(data);\n            }\n\n            if (decrypted && decrypted.string) {\n                decrypted = decrypted.string;\n            }\n\n        } catch (err) {\n            decrypted = null;\n        }\n\n        return decrypted;\n    }\n\n    isLogin(): boolean {\n        let exp = true;\n        try {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = JSON.parse(Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch (e) {\n        }\n        return !exp;\n    }\n\n    // todo reintegrate client.login()\n\n    async logout(): Promise<void | ErrorInterface> {\n        return this.getClient().logout(this.refreshToken);\n    }\n\n    getClientId(): string {\n        if (!this.client) {\n            return null;\n        }\n        return this.client.clientId;\n    }\n\n    async getIdToken() {\n        return this.idToken;\n    }\n\n    async getIdPayload(def?: any) {\n\n        const idToken = await this.getIdToken();\n\n        try {\n            let payload;\n            if (idToken) {\n                payload = idToken.split('.')[1];\n            }\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n            this._logger.log('fidj.connection.getIdPayload pb: ', def, e);\n        }\n\n        if (def) {\n            if (typeof def !== 'string') {\n                def = JSON.stringify(def);\n            }\n            return def;\n        }\n\n        return null;\n    }\n\n    async getAccessPayload(def?: any): Promise<string> {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    getPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return Base64.decode(payload);\n            }\n        } catch (e) {\n        }\n        return def ? def : null;\n    }\n\n    /**\n     * @throws ErrorInterface\n     */\n    async refreshConnection(): Promise<ClientUser> {\n\n        // store states\n        this._storage.set(Connection._states, this.states);\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const payload = this.accessToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const notExpired = (new Date().getTime() / 1000) < JSON.parse(decoded).exp;\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            this._logger.log('fidj.connection.connection.refreshConnection : token not expired ? ', notExpired);\n            if (notExpired) {\n                return Promise.resolve(this.getUser());\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const payload = this.refreshToken.split('.')[1];\n            const decoded = Base64.decode(payload);\n            const expired = (new Date().getTime() / 1000) >= JSON.parse(decoded).exp;\n            this._logger.log('fidj.connection.connection.refreshConnection : refreshToken not expired ? ', expired);\n            if (expired) {\n                this._storage.remove(Connection._refreshToken);\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('v2.accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove(Connection._accessToken);\n        this._storage.remove(Connection._idToken);\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        this._logger.log('fidj.connection.connection.refreshConnection : refresh authentication.');\n        const client = this.getClient();\n        if (!client) {\n            throw new Error(400, 'Need an initialized client.');\n        }\n\n        const refreshToken: ClientToken = await this.getClient().reAuthenticate(this.refreshToken);\n\n        const previousIdToken = new ClientToken(this.getClientId(), 'idToken', this.idToken);\n        const previousAccessToken = new ClientToken(this.getClientId(), 'accessToken', this.accessToken);\n        const clientTokens = new ClientTokens(this.getClientId(), previousIdToken, previousAccessToken, refreshToken);\n        await this.setConnection(clientTokens);\n        return this.getUser();\n    };\n\n    async setConnection(clientTokens: ClientTokens) {\n\n        // only in private storage\n        if (clientTokens.accessToken) {\n            this.accessToken = clientTokens.accessToken.data;\n            this._storage.set(Connection._accessToken, this.accessToken);\n\n            const salt: string = JSON.parse(await this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientTokens.idToken) {\n            this.idToken = clientTokens.idToken.data;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (clientTokens.refreshToken) {\n            this.refreshToken = clientTokens.refreshToken.data;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        // store changed states\n        this._storage.set(Connection._states, this.states);\n\n        // expose roles, message\n        const clientUser = new ClientUser(\n            clientTokens.username, clientTokens.username,\n            JSON.parse(await this.getIdPayload({roles: []})).roles,\n            JSON.parse(await this.getIdPayload({message: ''})).message);\n        this.setUser(clientUser);\n    };\n\n    async setConnectionOffline(options: ModuleServiceLoginOptionsInterface) {\n\n        if (options.accessToken) {\n            this.accessToken = options.accessToken;\n            this._storage.set(Connection._accessToken, this.accessToken);\n        }\n        if (options.idToken) {\n            this.idToken = options.idToken;\n            this._storage.set(Connection._idToken, this.idToken);\n        }\n        if (options.refreshToken) {\n            this.refreshToken = options.refreshToken;\n            this._storage.set(Connection._refreshToken, this.refreshToken);\n        }\n\n        this.setUser(new ClientUser('demo', 'demo',\n            JSON.parse(await this.getIdPayload({roles: []})).roles,\n            JSON.parse(await this.getIdPayload({message: ''})).message));\n    }\n\n    async getApiEndpoints(options?: ConnectionFindOptionsInterface): Promise<Array<EndpointInterface>> {\n\n        let ea: EndpointInterface[] = [\n            {key: 'fidj.default', url: 'https://api.fidj.ovh/v3', blocked: false}\n        ];\n        let filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = [\n                {key: 'fidj.default', url: 'http://localhost:3201/v3', blocked: false},\n                {key: 'fidj.default', url: 'https://fidj-sandbox.herokuapp.com/v3', blocked: false}\n            ];\n        }\n\n        if (this.accessToken) {\n            const val = await this.getAccessPayload({apis: []});\n            const apiEndpoints: EndpointInterface[] = JSON.parse(val).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                ea = [];\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const apiEndpoints: EndpointInterface[] = JSON.parse(this.getPreviousAccessPayload({apis: []})).apis;\n            if (apiEndpoints && apiEndpoints.length) {\n                apiEndpoints.forEach((endpoint) => {\n                    if (endpoint.url && ea.filter((r) => r.url === endpoint.url).length === 0) {\n                        ea.push(endpoint);\n                    }\n                });\n            }\n        }\n\n        this._logger.log('fidj.sdk.connection.getApiEndpoints : ', ea);\n\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < ea.length) && couldCheckStates; i++) {\n                if (!this.states[ea[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (options && options.filter) {\n            if (couldCheckStates && options.filter === 'theBestOne') {\n                for (let i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (couldCheckStates && options.filter === 'theBestOldOne') {\n                let bestOldOne: EndpointInterface;\n                for (let i = 0; (i < ea.length); i++) {\n                    const endpoint = ea[i];\n                    if (this.states[endpoint.url] &&\n                        this.states[endpoint.url].lastTimeWasOk &&\n                        (!bestOldOne || this.states[endpoint.url].lastTimeWasOk > this.states[bestOldOne.url].lastTimeWasOk)) {\n\n                        bestOldOne = endpoint;\n                    }\n                }\n                if (bestOldOne) {\n                    filteredEa.push(bestOldOne);\n                }\n            } else if (ea.length) {\n                filteredEa.push(ea[0]);\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n\n    async getDBs(options?: ConnectionFindOptionsInterface): Promise<EndpointInterface[]> {\n\n        if (!this.accessToken) {\n            return [];\n        }\n\n        // todo test random DB connection\n        const random = Math.random() % 2;\n        let dbs = JSON.parse(await this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let filteredDBs = [];\n        let couldCheckStates = true;\n        if (this.states && Object.keys(this.states).length) {\n            for (let i = 0; (i < dbs.length) && couldCheckStates; i++) {\n                if (!this.states[dbs[i].url]) {\n                    couldCheckStates = false;\n                }\n            }\n        } else {\n            couldCheckStates = false;\n        }\n\n        if (couldCheckStates && options && options.filter === 'theBestOne') {\n            for (let i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (couldCheckStates && options && options.filter === 'theBestOnes') {\n            for (let i = 0; (i < dbs.length); i++) {\n                const endpoint = dbs[i];\n                if (this.states[endpoint.url] &&\n                    this.states[endpoint.url].state) {\n                    filteredDBs.push(endpoint);\n                }\n            }\n        } else if (options && options.filter === 'theBestOne' && dbs.length) {\n            filteredDBs.push(dbs[0]);\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n\n    private async verifyApiState(currentTime: number, endpointUrl: string) {\n\n        try {\n\n            this._logger.log('fidj.sdk.connection.verifyApiState : ', currentTime, endpointUrl);\n\n            const data = await new Ajax()\n                .get({\n                    url: endpointUrl + '/status?isOk=' + this._sdk.version,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            let state = false;\n            if (data && data.isOk) {\n                state = true;\n            }\n            this.states[endpointUrl] = {state: state, time: currentTime, lastTimeWasOk: currentTime};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > states : ', this.states);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[endpointUrl]) {\n                lastTimeWasOk = this.states[endpointUrl].lastTimeWasOk;\n            }\n            this.states[endpointUrl] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n\n            this._logger.log('fidj.sdk.connection.verifyApiState > catch pb  - states : ', err, this.states);\n        }\n    }\n\n    private async verifyDbState(currentTime: number, dbEndpoint: string) {\n\n        try {\n            // console.log('verifyDbState: ', dbEndpoint);\n            await new Ajax()\n                .get({\n                    url: dbEndpoint,\n                    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n                });\n\n            this.states[dbEndpoint] = {state: true, time: currentTime, lastTimeWasOk: currentTime};\n            // resolve();\n            // console.log('verifyDbState: state', dbEndpoint, true);\n\n        } catch (err) {\n            let lastTimeWasOk = 0;\n            if (this.states[dbEndpoint]) {\n                lastTimeWasOk = this.states[dbEndpoint].lastTimeWasOk;\n            }\n            this.states[dbEndpoint] = {state: false, time: currentTime, lastTimeWasOk: lastTimeWasOk};\n            // resolve();\n        }\n    }\n\n    async verifyConnectionStates(): Promise<any | ErrorInterface> {\n\n        const currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const promises = [];\n        // this.states = {};\n        this.apis = await this.getApiEndpoints();\n        this.apis.forEach((endpointObj) => {\n            let endpointUrl: string = endpointObj.url;\n            if (!endpointUrl) {\n                endpointUrl = endpointObj.toString();\n            }\n            promises.push(this.verifyApiState(currentTime, endpointUrl));\n        });\n\n        const dbs = await this.getDBs();\n        dbs.forEach((dbEndpointObj) => {\n            let dbEndpoint: string = dbEndpointObj.url;\n            if (!dbEndpoint) {\n                dbEndpoint = dbEndpointObj.toString();\n            }\n            promises.push(this.verifyDbState(currentTime, dbEndpoint));\n        });\n        return Promise.all(promises);\n    };\n\n}\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\nimport {Error} from '../sdk/error';\nimport {EndpointInterface, ErrorInterface} from '../sdk/interfaces';\n\nlet FidjPouch;\n\nif (typeof window !== 'undefined' && typeof require !== 'undefined') {\n    FidjPouch = (window['PouchDB']) ? window['PouchDB'] : require('pouchdb').default; // .default;\n    // load cordova adapter : https://github.com/pouchdb-community/pouchdb-adapter-cordova-sqlite/issues/22\n    const PouchAdapterCordovaSqlite = require('pouchdb-adapter-cordova-sqlite');\n    FidjPouch.plugin(PouchAdapterCordovaSqlite);\n}\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\n\nexport class Session {\n\n    public dbRecordCount: number;\n    public dbLastSync: number; // Date().getTime();\n\n    private db: PouchDB; // PouchDB\n    private remoteDb: PouchDB; // PouchDB;\n    private remoteUri: string;\n    private dbs: Array<EndpointInterface>;\n\n    constructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n\n    public isReady(): boolean {\n        return !!this.db;\n    }\n\n    public create(uid: string, force?: boolean): Promise<any | ErrorInterface> {\n\n        if (!force && this.db) {\n            return Promise.resolve(this.db);\n        }\n\n        this.dbRecordCount = 0;\n        this.dbLastSync = null; // new Date().getTime();\n        this.db = null;\n        uid = uid || 'default';\n\n        if (typeof window === 'undefined' || !FidjPouch) {\n            return Promise.resolve(this.db);\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let opts: any = {location: 'default'};\n            try {\n                if (window['cordova']) {\n                    opts = {location: 'default', adapter: 'cordova-sqlite'};\n                    //    const plugin = require('pouchdb-adapter-cordova-sqlite');\n                    //    if (plugin) { Pouch.plugin(plugin); }\n                    //    this.db = new Pouch('fidj_db', {adapter: 'cordova-sqlite'});\n                }\n                // } else {\n                this.db = new FidjPouch('fidj_db_' + uid, opts); // , {adapter: 'websql'} ???\n                // }\n\n                this.db.info()\n                    .then((info) => {\n\n                        // todo if (info.adapter !== 'websql') {\n                        return resolve(this.db);\n                        // }\n\n                        // const newopts: any = opts || {};\n                        // newopts.adapter = 'idb';\n                        //\n                        // const newdb = new Pouch('fidj_db', opts);\n                        // this.db.replicate.to(newdb)\n                        //     .then(() => {\n                        //         this.db = newdb;\n                        //         resolve();\n                        //     })\n                        //     .catch((err) => {\n                        //         reject(new Error(400, err.toString()))\n                        //     });\n\n                    }).catch((err) => {\n                    reject(new Error(400, err));\n                });\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public async destroy(): Promise<void> {\n\n        if (!this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n            return;\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(new Error(500, err));\n                } else {\n                    this.dbRecordCount = 0;\n                    this.dbLastSync = null;\n                    this.db = null;\n                    resolve();\n                }\n            });\n        });\n    };\n\n    public setRemote(dbs: Array<EndpointInterface>): void {\n        this.dbs = dbs;\n    }\n\n    public sync(userId: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject(new Error(408, 'need a remote db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!FidjPouch) {\n                    return;\n                }\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0].url) {\n                    this.remoteUri = this.dbs[0].url;\n                    this.remoteDb = new FidjPouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db.replicate.to(this.remoteDb)\n                    .on('complete', (info) => {\n                        return this.remoteDb.replicate.to(this.db,\n                            {\n                                filter: (doc) => {\n                                    return (!!userId && !!doc && doc.fidjUserId === userId);\n                                }\n                            })\n                            .on('complete', () => {\n                                // this.logger\n                                resolve();\n                            })\n                            .on('denied', (err) => reject({code: 403, reason: {second: err}}))\n                            .on('error', (err) => reject({code: 401, reason: {second: err}}));\n\n                    })\n                    .on('denied', (err) => reject({code: 403, reason: {first: err}}))\n                    .on('error', (err) => reject({code: 401, reason: {first: err}}));\n\n            } catch (err) {\n                reject(new Error(500, err));\n            }\n        });\n    }\n\n    public put(data: any,\n               _id: string,\n               uid: string,\n               oid: string,\n               ave: string,\n               crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject(new Error(400, 'need formated data'));\n        }\n\n        const dataWithoutIds = JSON.parse(JSON.stringify(data));\n        const toStore: any = {\n            _id: _id,\n            fidjUserId: uid,\n            fidjOrgId: oid,\n            fidjAppVersion: ave\n        };\n        if (dataWithoutIds._rev) {\n            toStore._rev = '' + dataWithoutIds._rev;\n        }\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.fidjUserId;\n        delete dataWithoutIds.fidjOrgId;\n        delete dataWithoutIds.fidjAppVersion;\n        delete dataWithoutIds.fidjData;\n\n        let resultAsString = Session.write(Session.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n            toStore.fidjDacr = resultAsString;\n        } else {\n            toStore.fidjData = resultAsString;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    this.dbRecordCount++;\n\n                    // propagate _rev & _id\n                    if (typeof data === 'object') {\n                        (data as any)._rev = response.rev;\n                        (data as any)._id = response.id;\n                        resolve(data);\n                    } else {\n                        resolve(response.id);\n                    }\n\n                } else {\n                    reject(new Error(500, err));\n                }\n            });\n        });\n    }\n\n    public remove(data_id: string): Promise<void | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public get(data_id: string, crypto?: SessionCryptoInterface): Promise<any | ErrorInterface> {\n\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'Need db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && (!!row.fidjDacr || !!row.fidjData)) {\n                        let data = row.fidjDacr;\n                        if (crypto && data) {\n                            data = crypto.obj[crypto.method](data);\n                        } else if (row.fidjData) {\n                            data = JSON.parse(row.fidjData);\n                        }\n                        const resultAsJson = Session.extractJson(data);\n                        if (resultAsJson) {\n                            resultAsJson._id = row._id;\n                            resultAsJson._rev = row._rev;\n                            resolve(JSON.parse(JSON.stringify(resultAsJson)));\n                        } else {\n                            // row._deleted = true;\n                            this.remove(row._id);\n                            reject(new Error(400, 'Bad encoding'));\n                        }\n                    } else {\n                        reject(new Error(400, 'No data found'));\n                    }\n                })\n                .catch(err => reject(new Error(500, err)));\n        });\n    }\n\n    public getAll(crypto?: SessionCryptoInterface): Promise<Array<any> | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'Need a valid db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc._id && (!!row.doc.fidjDacr || !!row.doc.fidjData)) {\n                            let data = row.doc.fidjDacr;\n                            if (crypto && data) {\n                                data = crypto.obj[crypto.method](data);\n                            } else if (row.doc.fidjData) {\n                                data = JSON.parse(row.doc.fidjData);\n                            }\n                            const resultAsJson = Session.extractJson(data);\n                            if (resultAsJson) {\n                                resultAsJson._id = row.doc._id;\n                                resultAsJson._rev = row.doc._rev;\n                                all.push(JSON.parse(JSON.stringify(resultAsJson)));\n                            } else {\n                                console.error('Bad encoding : delete row');\n                                // resultAsJson = {};\n                                // resultAsJson._id = row.doc._id;\n                                // resultAsJson._rev = row.doc._rev;\n                                // resultAsJson._deleted = true;\n                                // all.push(resultAsJson);\n                                this.remove(row.doc._id);\n                            }\n                        } else {\n                            console.error('Bad encoding');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(new Error(400, err)));\n        });\n    }\n\n    public isEmpty(): Promise<boolean | ErrorInterface> {\n\n        if (!this.db || !(this.db as any).allDocs) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n\n        return new Promise((resolve, reject) => {\n            (this.db as any).allDocs({\n                // filter:  (doc) => {\n                //    if (!self.connection.user || !self.connection.user._id) return doc;\n                //    if (doc.fidjUserId === self.connection.user._id) return doc;\n                // }\n            })\n                .then((response) => {\n                    if (!response) {\n                        reject(new Error(400, 'No response'));\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(new Error(400, err)));\n        });\n    }\n\n    public info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject(new Error(408, 'No db'));\n        }\n        return this.db.info();\n    }\n\n    static write(item: any): string {\n        let value = 'null';\n        const t = typeof (item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n\n    static value(item: any): any {\n        let result = item;\n        if (typeof (item) !== 'object') {\n            // return item;\n        } else if ('string' in item) {\n            result = item.string;\n        } else if ('number' in item) {\n            result = item.number.valueOf();\n        } else if ('bool' in item) {\n            result = item.bool.valueOf();\n        } else if ('json' in item) {\n            result = item.json;\n            if (typeof (result) !== 'object') {\n                result = JSON.parse(result);\n            }\n        }\n        return result;\n    }\n\n    static extractJson(item: any): any {\n        let result = item;\n        if (!item) {\n            return null;\n        }\n        if (typeof (item) === 'object' && 'json' in item) {\n            result = item.json;\n        }\n        if (typeof (result) === 'string') {\n            result = JSON.parse(result);\n        }\n        if (typeof (result) === 'object' && 'json' in result) {\n            result = (result as any).json;\n        }\n        if (typeof result !== 'object') {\n            result = null;\n        }\n        return result;\n    }\n\n}\n","export class Error {\n\n    constructor() {\n    };\n\n\n}","import {\n    LoggerInterface, LoggerLevelEnum\n} from './interfaces';\n\nexport class LoggerService implements LoggerInterface {\n\n    constructor(private level?: LoggerLevelEnum) {\n        if (!level) {\n            this.level = LoggerLevelEnum.ERROR;\n        }\n\n        if (typeof console === 'undefined') {\n            this.level = LoggerLevelEnum.NONE;\n        }\n    }\n\n    log(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO) {\n            console.log(message, args);\n        }\n    }\n\n    warn(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO || this.level === LoggerLevelEnum.WARN) {\n            console.warn(message, args);\n        }\n    }\n\n    error(message: string, args: [any]) {\n        if (this.level === LoggerLevelEnum.INFO || this.level === LoggerLevelEnum.WARN || this.level === LoggerLevelEnum.ERROR) {\n            console.error(message, args);\n        }\n    }\n\n    setLevel(level: LoggerLevelEnum) {\n        this.level = level;\n    }\n}\n\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {\n    LoggerInterface,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceLoginOptionsInterface,\n    SdkInterface,\n    ErrorInterface, EndpointInterface, EndpointFilterInterface, LoggerLevelEnum, EndpointCallInterface\n} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\nimport {Error} from './error';\nimport {Ajax} from '../connection/ajax';\nimport {LoggerService} from './logger.service';\nimport {ClientTokens, ClientUser} from '../connection';\nimport urljoin from 'url-join';\n// import {LocalStorage} from 'node-localstorage';\n// import 'localstorage-polyfill/localStorage';\n\n// const PouchDB = window['PouchDB'] || require('pouchdb').default;\n\n/**\n * please use its angular.js or angular.io wrapper\n * usefull only for fidj dev team\n */\nexport class InternalService {\n\n    private sdk: SdkInterface;\n    private logger: LoggerInterface;\n    private promise: PromiseConstructor;\n    private storage: tools.LocalStorage;\n    private session: session.Session;\n    private connection: connection.Connection;\n\n    constructor(logger: LoggerInterface, promise: PromiseConstructor, options?: ModuleServiceInitOptionsInterface) {\n\n        this.sdk = {\n            org: 'fidj',\n            version: version.version,\n            prod: false,\n            useDB: true\n        };\n        if (promise) {\n            this.promise = promise;\n        }\n        if (logger) {\n            this.logger = logger;\n        } else {\n            this.logger = new LoggerService();\n        }\n        if (options && options.logLevel) {\n            this.logger.setLevel(options.logLevel);\n        }\n\n        this.logger.log('fidj.sdk.service : constructor');\n        let ls;\n        if (typeof window !== 'undefined') {\n            ls = window.localStorage;\n        } else if (typeof global !== 'undefined') {\n            import('localstorage-polyfill');\n            ls = global['localStorage'];\n        }\n        this.storage = new tools.LocalStorage(ls, 'fidj.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage, this.logger);\n    }\n\n    /**\n     * Init connection & session\n     * Check uri\n     * Done each app start\n     *\n     * @param fidjId\n     * @param options Optional settings\n     * @param options.fidjId  required use your customized endpoints\n     * @param options.fidjSalt required use your customized endpoints\n     * @param options.fidjVersion required use your customized endpoints\n     * @param options.devMode optional default false, use your customized endpoints\n     * @returns\n     * @throws {ErrorInterface}\n     */\n    public async fidjInit(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void> {\n\n        /*if (options && options.forcedEndpoint) {\n            this.fidjService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.fidjService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        if (options && options.logLevel) {\n            this.logger.setLevel(options.logLevel);\n        } else {\n            this.logger.setLevel(LoggerLevelEnum.NONE);\n        }\n\n        this.logger.log('fidj.sdk.service.fidjInit : ', options);\n        if (!fidjId) {\n            this.logger.error('fidj.sdk.service.fidjInit : bad init');\n            return this.promise.reject(new Error(400, 'Need a fidjId'));\n        }\n\n        this.sdk.prod = !options ? true : options.prod;\n        this.sdk.useDB = !options ? false : options.useDB;\n        this.connection.fidjId = fidjId;\n        this.connection.fidjVersion = this.sdk.version;\n        this.connection.fidjCrypto = (!options || !options.hasOwnProperty('crypto')) ? false : options.crypto;\n\n        let bestUrls, bestOldUrls;\n        try {\n            await this.connection.verifyConnectionStates();\n            bestUrls = await this.connection.getApiEndpoints({filter: 'theBestOne'});\n            bestOldUrls = await this.connection.getApiEndpoints({filter: 'theBestOldOne'});\n        } catch (err) {\n            this.logger.error('fidj.sdk.service.fidjInit: ', err);\n            throw new Error(500, err.toString());\n        }\n\n        if (!bestUrls || !bestOldUrls || (bestUrls.length === 0 && bestOldUrls.length === 0)) {\n            throw new Error(404, 'Need one connection - or too old SDK version (check update)');\n        }\n\n        let theBestFirstUrl = bestUrls[0];\n        let theBestFirstOldUrl = bestOldUrls[0];\n        const isLogin = this.fidjIsLogin();\n        this.logger.log('fidj.sdk.service.fidjInit > verifyConnectionStates : ', theBestFirstUrl, theBestFirstOldUrl, isLogin);\n\n        if (theBestFirstUrl) {\n            this.connection.setClient(new connection.Client(this.connection.fidjId, theBestFirstUrl.url, this.storage, this.sdk));\n        } else {\n            this.connection.setClient(new connection.Client(this.connection.fidjId, theBestFirstOldUrl.url, this.storage, this.sdk));\n        }\n    };\n\n    /**\n     * Call it if fidjIsLogin() === false\n     * Erase all (db & storage)\n     *\n     * @param login\n     * @param password\n     * @throws {ErrorInterface}\n     */\n    public async fidjLogin(login: string, password: string): Promise<ClientUser> {\n        this.logger.log('fidj.sdk.service.fidjLogin');\n        if (!this.connection.isReady()) {\n            throw new Error(404, 'Need an initialized FidjService');\n        }\n\n        try {\n            await this._removeAll();\n            await this.connection.verifyConnectionStates();\n            await this._createSession(this.connection.fidjId);\n            const clientTokens = await this._loginInternal(login, password);\n            await this.connection.setConnection(clientTokens);\n        } catch (err) {\n            throw new Error(500, err.toString());\n        }\n\n        if (!this.sdk.useDB) {\n            return this.connection.getUser();\n        }\n\n        try {\n            await this.session.sync(this.connection.getClientId());\n        } catch (e) {\n            this.logger.warn('fidj.sdk.service.fidjLogin: sync -not blocking- issue  ', e.toString());\n        }\n        return this.connection.getUser();\n    }\n\n    /**\n     *\n     * @param options\n     * @param options.accessToken optional\n     * @param options.idToken  optional\n     * @returns\n     */\n    public async fidjLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        const self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n            const now = new Date();\n            now.setDate(now.getDate() + 1);\n            const tomorrow = now.getTime();\n            const payload = tools.Base64.encode(JSON.stringify({\n                roles: [],\n                message: 'demo',\n                apis: [],\n                endpoints: [],\n                dbs: [],\n                exp: tomorrow\n            }));\n            const jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self._createSession(self.connection.fidjId);\n                })\n                .then(async () => {\n                    await self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('fidj.sdk.service.fidjLoginInDemoMode error: ', err);\n                    reject(err);\n                });\n        });\n    };\n\n    public fidjIsLogin(): boolean {\n        return this.connection.isLogin();\n    };\n\n    public async fidjGetEndpoints(filter?: EndpointFilterInterface): Promise<Array<EndpointInterface>> {\n\n        if (!filter) {\n            filter = {showBlocked: false};\n        }\n        const ap = await this.connection.getAccessPayload({endpoints: []});\n        let endpoints = JSON.parse(ap).endpoints;\n        if (!endpoints || !Array.isArray(endpoints)) {\n            return [];\n        }\n\n        endpoints = endpoints.filter((endpoint: EndpointInterface) => {\n            let ok = true;\n            if (ok && filter.key) {\n                ok = (endpoint.key === filter.key);\n            }\n            if (ok && !filter.showBlocked) {\n                ok = !endpoint.blocked;\n            }\n            return ok;\n        });\n        return endpoints;\n    };\n\n    public async fidjRoles(): Promise<Array<string>> {\n        return JSON.parse(await this.connection.getIdPayload({roles: []})).roles;\n    };\n\n    public async fidjMessage(): Promise<string> {\n        return JSON.parse(await this.connection.getIdPayload({message: ''})).message;\n    };\n\n    public async fidjLogout(force?: boolean): Promise<void | ErrorInterface> {\n        const self = this;\n        if (!self.connection.getClient() && !force) {\n            return self._removeAll()\n                .then(() => {\n                    return this.session.create(self.connection.fidjId, true);\n                });\n        }\n\n        return self.connection.logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            })\n            .then(() => {\n                return this.session.create(self.connection.fidjId, true);\n            });\n    };\n\n    /**\n     * Synchronize DB\n     *\n     *\n     * @param fnInitFirstData a function with db as input and that return promise: call if DB is empty\n     * @param fnInitFirstData_Arg arg to set to fnInitFirstData()\n     * @returns  promise\n     */\n    public async fidjSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjSync');\n        // if (!self.session.isReady()) {\n        //    return self.promise.reject('fidj.sdk.service.fidjSync : DB sync impossible. Did you login ?');\n        // }\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjSync: you ar not using DB - no sync available.');\n            return Promise.resolve();\n        }\n\n        const firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession(self.connection.fidjId)\n                .then(() => {\n                    return self.session.sync(self.connection.getClientId());\n                })\n                .then(() => {\n                    self.logger.log('fidj.sdk.service.fidjSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('fidj.sdk.service.fidjSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('fidj.sdk.service.fidjSync isEmpty : ', isEmpty, firstSync);\n\n                    return new self.promise((resolveEmpty, rejectEmptyNotUsed) => {\n                        if (isEmpty && firstSync && fnInitFirstData) {\n                            const ret = fnInitFirstData(fnInitFirstData_Arg);\n                            if (ret && ret['catch'] instanceof Function) {\n                                ret.then(resolveEmpty).catch(reject);\n                            }\n                            if (typeof ret === 'string') {\n                                self.logger.log(ret);\n                            }\n                        }\n                        resolveEmpty(null); // self.connection.getUser());\n                    });\n                })\n                .then((info) => {\n                    self.logger.log('fidj.sdk.service.fidjSync fnInitFirstData resolved: ', info);\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('fidj.sdk.service.fidjSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((user) => {\n                    self.logger.log('fidj.sdk.service.fidjSync refreshConnection done : ', user);\n                    resolve(); // self.connection.getUser()\n                })\n                .catch((err: ErrorInterface) => {\n                    // console.error(err);\n                    self.logger.warn('fidj.sdk.service.fidjSync refreshConnection failed : ', err);\n\n                    if (err && (err.code === 403 || err.code === 410)) {\n                        this.fidjLogout()\n                            .then(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again.'});\n                            })\n                            .catch(() => {\n                                reject({code: 403, reason: 'Synchronization unauthorized : need to login again..'});\n                            });\n                    } else if (err && err.code) {\n                        // todo what to do with this err ?\n                        resolve();\n                    } else {\n                        const errMessage = 'Error during synchronisation: ' + err.toString();\n                        self.logger.error(errMessage);\n                        reject({code: 500, reason: errMessage});\n                    }\n                })\n            ;\n        });\n    };\n\n    public async fidjPutInDb(data: any): Promise<string | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjPutInDb: ', data);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjPutInDb: you are not using DB - no put available.');\n            return Promise.resolve('NA');\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'DB put impossible. Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.fidjId);\n        }\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.fidjVersion,\n            crypto);\n    };\n\n    public async fidjRemoveInDb(data_id: string): Promise<void | ErrorInterface> {\n        const self = this;\n        self.logger.log('fidj.sdk.service.fidjRemoveInDb ', data_id);\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjRemoveInDb: you are not using DB - no remove available.');\n            return Promise.resolve();\n        }\n\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject(new Error(400, 'DB remove impossible. ' +\n                'Need the data._id.'));\n        }\n\n        return self.session.remove(data_id);\n    };\n\n    public async fidjFindInDb(data_id: string): Promise<any | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindInDb: you are not using DB - no find available.');\n            return Promise.resolve();\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Find pb : need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, ' Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n\n    public async fidjFindAllInDb(): Promise<Array<any> | ErrorInterface> {\n        const self = this;\n\n        if (!self.sdk.useDB) {\n            self.logger.log('fidj.sdk.service.fidjFindAllInDb: you are not using DB - no find available.');\n            return Promise.resolve([]);\n        }\n\n        if (!self.connection.getClientId()) {\n            return self.promise.reject(new Error(401, 'Need a user logged in.'));\n        }\n        if (!self.session.isReady()) {\n            return self.promise.reject(new Error(400, 'Need to be synchronised.'));\n        }\n\n        let crypto: SessionCryptoInterface;\n        if (self.connection.fidjCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto)\n            .then(results => {\n                self.connection.setCryptoSaltAsVerified();\n                return self.promise.resolve((results as Array<any>));\n            });\n    };\n\n    public async fidjSendOnEndpoint(input: EndpointCallInterface): Promise<any> {\n        const filter: EndpointFilterInterface = input.key ? {key: input.key} : null;\n        const endpoints = await this.fidjGetEndpoints(filter);\n        if (!input.defaultKeyUrl && (!endpoints || endpoints.length !== 1)) {\n            throw new Error(400, 'fidj.sdk.service.fidjSendOnEndpoint : endpoint does not exist.');\n        }\n\n        let firstEndpointUrl = (!endpoints || endpoints.length !== 1) ? input.defaultKeyUrl : endpoints[0].url;\n        if (input.relativePath) {\n            firstEndpointUrl = urljoin(firstEndpointUrl, input.relativePath);\n        }\n        const jwt = await this.connection.getIdToken();\n        let answer;\n        const query = new Ajax();\n        switch (input.verb) {\n            case 'POST' :\n                answer = query.post({\n                    url: firstEndpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: input.data ? input.data : {}\n                });\n                break;\n            case 'PUT' :\n                answer = query.put({\n                    url: firstEndpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    data: input.data ? input.data : {}\n                });\n                break;\n            case 'DELETE' :\n                answer = query.delete({\n                    url: firstEndpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n                break;\n            default:\n                answer = query.get({\n                    url: firstEndpointUrl,\n                    // not used : withCredentials: true,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + jwt\n                    },\n                    // not used: data: data\n                });\n        }\n        return answer;\n    };\n\n    public async fidjForgotPasswordRequest(email: String) {\n\n        const bestUrls = await this.connection.getApiEndpoints({filter: 'theBestOne'});\n        if (!bestUrls ||bestUrls.length !== 1) {\n            throw new Error(400, 'fidj.sdk.service.fidjForgotPasswordRequest : api endpoint does not exist.');\n        }\n\n        const query = new Ajax();\n        await query.post({\n            url: bestUrls[0].url + '/me/forgot',\n            // not used : withCredentials: true,\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            data: {email}\n        });\n    }\n\n    public async fidjGetIdToken() {\n        return this.connection.getIdToken();\n    };\n\n    // Internal functions\n\n    /**\n     * Logout then Login\n     *\n     * @param login\n     * @param password\n     * @param updateProperties\n     * @throws {ErrorInterface}\n     */\n    private async _loginInternal(login: string, password: string, updateProperties?: any): Promise<ClientTokens> {\n        this.logger.log('fidj.sdk.service._loginInternal');\n        if (!this.connection.isReady()) {\n            throw new Error(403, 'Need an initialized FidjService');\n        }\n\n        await this.connection.logout();\n\n        let clientTokens;\n        try {\n            clientTokens = this.connection.getClient().login(login, password, updateProperties);\n        } catch (e) {\n            clientTokens = await this.connection.getClient().login(login, password, updateProperties);\n        }\n        return clientTokens;\n    };\n\n    protected async _removeAll(): Promise<void | ErrorInterface> {\n        await this.connection.destroy();\n        await this.session.destroy();\n    };\n\n    private async _createSession(uid: string): Promise<void | ErrorInterface> {\n        const dbs: EndpointInterface[] = await this.connection.getDBs({filter: 'theBestOnes'});\n        if (!dbs || dbs.length === 0) {\n            this.logger.warn('Seems that you are in Demo mode or using Node (no remote DB).');\n        }\n        this.session.setRemote(dbs);\n        return this.session.create(uid);\n    };\n\n    private async _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\n\n    private static _srvDataUniqId = 0;\n\n    private _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const now = new Date();\n        const simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const sequId = ++InternalService._srvDataUniqId;\n        let UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {\n    EndpointCallInterface,\n    EndpointInterface,\n    ErrorInterface,\n    LoggerInterface,\n    LoggerLevelEnum,\n    ModuleServiceInitOptionsInterface,\n    ModuleServiceInterface,\n    ModuleServiceLoginOptionsInterface\n} from './interfaces';\nimport {InternalService} from './internal.service';\nimport {Error as FidjError} from '../connection';\nimport {LoggerService} from './logger.service';\n\n/**\n * Angular FidjService\n * @see ModuleServiceInterface\n *\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FidjService implements ModuleServiceInterface {\n\n    private logger: LoggerInterface;\n    private fidjService: InternalService;\n    private promise: any;\n\n    constructor() {\n        this.logger = new LoggerService(LoggerLevelEnum.ERROR);\n        this.promise = Promise;\n        this.fidjService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n\n    public async init(fidjId: string, options?: ModuleServiceInitOptionsInterface): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            this.fidjService = new InternalService(this.logger, this.promise);\n        }\n        return this.fidjService.fidjInit(fidjId, options);\n    };\n\n    public async login(login: string, password: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.login : not initialized.'));\n        }\n        return this.fidjService.fidjLogin(login, password);\n    };\n\n    public async loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjLoginInDemoMode(options);\n    };\n\n    public isLoggedIn(): boolean {\n        if (!this.fidjService) {\n            return false; // this.promise.reject('fidj.sdk.angular.isLoggedIn : not initialized.');\n        }\n        return this.fidjService.fidjIsLogin();\n    };\n\n    public async getRoles(): Promise<Array<string>> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return await this.fidjService.fidjRoles();\n    };\n\n    public async getEndpoints(): Promise<Array<EndpointInterface>> {\n        if (!this.fidjService) {\n            return [];\n        }\n        return this.fidjService.fidjGetEndpoints();\n    };\n\n    /**\n     * @throws {ErrorInterface}\n     * @param {EndpointCallInterface} input\n     */\n    public async sendOnEndpoint(input: EndpointCallInterface): Promise<any> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjSendOnEndpoint(input);\n    };\n\n    public async forgotPasswordRequest(email: String): Promise<void> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.loginAsDemo : not initialized.'));\n        }\n        return this.fidjService.fidjForgotPasswordRequest(email);\n    };\n\n    public async getIdToken() {\n        if (!this.fidjService) {\n            return;\n        }\n        return this.fidjService.fidjGetIdToken();\n    };\n\n    public async getMessage(): Promise<string> {\n        if (!this.fidjService) {\n            return '';\n        }\n        return this.fidjService.fidjMessage();\n    };\n\n    public async logout(force?: boolean): Promise<void | ErrorInterface> {\n        if (force || !this.fidjService) {\n            return this.promise.reject(new FidjError(303, 'fidj.sdk.angular.logout : not initialized.'));\n        }\n        return this.fidjService.fidjLogout(force);\n    };\n\n    /**\n     *\n     * Synchronize DB\n     * @param fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n     * @returns promise with this.session.db\n     * @memberof fidj.angularService\n     *\n     * @example\n     *  let initDb = function() {\n     *     this.fidjService.put('my first row');\n     *  };\n     *  this.fidjService.sync(initDb)\n     *  .then(user => ...)\n     *  .catch(err => ...)\n     *\n     */\n    public async sync(fnInitFirstData?): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.sync : not initialized.'));\n        }\n        return this.fidjService.fidjSync(fnInitFirstData, this);\n    };\n\n    /**\n     * Store data in your session\n     *\n     * @param data to store\n     * @returns\n     */\n    public async put(data: any): Promise<string | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.put : not initialized.'));\n        }\n        return this.fidjService.fidjPutInDb(data);\n    };\n\n    /**\n     * Find object Id and remove it from your session\n     *\n     * @param id of object to find and remove\n     * @returns\n     */\n    public async remove(id: string): Promise<void | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.remove : not initialized.'));\n        }\n        return this.fidjService.fidjRemoveInDb(id);\n    };\n\n    /**\n     * Find\n     */\n    public async find(id: string): Promise<any | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.find : not initialized.'));\n        }\n        return this.fidjService.fidjFindInDb(id);\n    };\n\n    public async findAll(): Promise<any[] | ErrorInterface> {\n        if (!this.fidjService) {\n            return this.promise.reject(new FidjError(401, 'fidj.sdk.angular.findAll : not initialized.'));\n        }\n        return this.fidjService.fidjFindAllInDb();\n    };\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["Error","tools.Base64","version.version","tools.LocalStorage","session.Session","connection.Connection","connection.Client","FidjError"],"mappings":"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"}