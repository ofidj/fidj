import { Ajax } from './ajax';
var Client = /** @class */ (function () {
    function Client(appId, URI, storage, sdk) {
        this.appId = appId;
        this.URI = URI;
        this.storage = storage;
        this.sdk = sdk;
        var uuid = this.storage.get(Client._clientUuid) || 'uuid-' + Math.random();
        var info = '_clientInfo'; // this.storage.get(Client._clientInfo);
        if (typeof window !== 'undefined' && window.navigator) {
            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;
        }
        if (typeof window !== 'undefined' && window['device'] && window['device'].uuid) {
            uuid = window['device'].uuid;
        }
        this.setClientUuid(uuid);
        this.setClientInfo(info);
        this.clientId = this.storage.get(Client._clientId);
        Client.refreshCount = this.storage.get(Client._refreshCount) || Client.refreshCountInitial;
    }
    ;
    Client.prototype.setClientId = function (value) {
        this.clientId = '' + value;
        this.storage.set(Client._clientId, this.clientId);
    };
    Client.prototype.setClientUuid = function (value) {
        this.clientUuid = '' + value;
        this.storage.set(Client._clientUuid, this.clientUuid);
    };
    Client.prototype.setClientInfo = function (value) {
        this.clientInfo = '' + value;
        // this.storage.set('clientInfo', this.clientInfo);
    };
    Client.prototype.login = function (login, password, updateProperties) {
        var _this = this;
        if (!this.URI) {
            console.error('no api uri');
            return Promise.reject({ code: 408, reason: 'no-api-uri' });
        }
        var urlLogin = this.URI + '/users';
        var dataLogin = {
            name: login,
            username: login,
            email: login,
            password: password
        };
        return new Ajax()
            .post({
            url: urlLogin,
            data: dataLogin,
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
        })
            .then(function (createdUser) {
            _this.setClientId(createdUser._id);
            var urlToken = _this.URI + '/oauth/token';
            var dataToken = {
                grant_type: 'client_credentials',
                client_id: _this.clientId,
                client_secret: password,
                client_udid: _this.clientUuid,
                client_info: _this.clientInfo,
                audience: _this.appId,
                scope: JSON.stringify(_this.sdk)
            };
            return new Ajax()
                .post({
                url: urlToken,
                data: dataToken,
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
            });
        });
    };
    Client.prototype.reAuthenticate = function (refreshToken) {
        var _this = this;
        if (!this.URI) {
            console.error('no api uri');
            return Promise.reject({ code: 408, reason: 'no-api-uri' });
        }
        var url = this.URI + '/oauth/token';
        var data = {
            grant_type: 'refresh_token',
            client_id: this.clientId,
            client_udid: this.clientUuid,
            client_info: this.clientInfo,
            audience: this.appId,
            scope: JSON.stringify(this.sdk),
            refresh_token: refreshToken,
            refresh_extra: Client.refreshCount,
        };
        return new Ajax()
            .post({
            url: url,
            data: data,
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
        })
            .then(function (obj) {
            Client.refreshCount++;
            _this.storage.set(Client._refreshCount, Client.refreshCount);
            return Promise.resolve(obj);
        });
    };
    Client.prototype.logout = function (refreshToken) {
        if (!this.URI) {
            console.error('no api uri');
            return Promise.reject({ code: 408, reason: 'no-api-uri' });
        }
        // delete this.clientUuid;
        // delete this.clientId;
        // this.storage.remove(Client._clientUuid);
        this.storage.remove(Client._clientId);
        this.storage.remove(Client._refreshCount);
        Client.refreshCount = Client.refreshCountInitial;
        if (!refreshToken || !this.clientId) {
            return Promise.resolve();
        }
        var url = this.URI + '/oauth/revoke';
        var data = {
            token: refreshToken,
            client_id: this.clientId,
            client_udid: this.clientUuid,
            client_info: this.clientInfo,
            audience: this.appId,
            scope: JSON.stringify(this.sdk)
        };
        return new Ajax()
            .post({
            url: url,
            data: data,
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
        });
    };
    Client.prototype.isReady = function () {
        return !!this.URI;
    };
    // private refreshToken: string;
    Client.refreshCountInitial = 1;
    Client.refreshCount = Client.refreshCountInitial;
    Client._clientUuid = 'v2.clientUuid';
    Client._clientId = 'v2.clientId';
    Client._refreshCount = 'v2.refreshCount';
    return Client;
}());
export { Client };
//# sourceMappingURL=data:application/json;base64,